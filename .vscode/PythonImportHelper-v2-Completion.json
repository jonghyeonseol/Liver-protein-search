[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "auc",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "precision_recall_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "average_precision_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "venn3",
        "importPath": "matplotlib_venn",
        "description": "matplotlib_venn",
        "isExtraImport": true,
        "detail": "matplotlib_venn",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "Line2D",
        "importPath": "matplotlib.lines",
        "description": "matplotlib.lines",
        "isExtraImport": true,
        "detail": "matplotlib.lines",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "calculate_confidence_score",
        "kind": 2,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "def calculate_confidence_score(row):\n    \"\"\"\n    Calculate confidence score based on:\n    - nTPM value (0-40 points)\n    - Number of criteria met (0-30 points)\n    - Presence in cluster (0-15 points)\n    - Presence in enrichment (0-15 points)\n    \"\"\"\n    score = 0\n    # nTPM-based scoring (0-40 points)",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "classify_by_confidence",
        "kind": 2,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "def classify_by_confidence(score):\n    if score >= 80:\n        return 'High Confidence'\n    elif score >= 60:\n        return 'Medium-High Confidence'\n    elif score >= 40:\n        return 'Medium Confidence'\n    elif score >= 20:\n        return 'Low-Medium Confidence'\n    else:",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "trace_data = pd.read_csv('Trace/Data tracing.csv')\nprint(\"\\n\" + \"=\"*80)\nprint(\"LIVER PROTEIN CLASSIFICATION STRATEGY ANALYSIS\")\nprint(\"=\"*80)\n# ============================================================================\n# STRATEGY 1: Current Multi-Criteria Approach\n# ============================================================================\nprint(\"\\n### STRATEGY 1: Multi-Criteria Overlap ###\")\nprint(\"-\" * 80)\ncurrent_stats = trace_data['Classification'].value_counts()",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "current_stats",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "current_stats = trace_data['Classification'].value_counts()\nprint(\"\\nCurrent Classification:\")\nprint(current_stats)\nliver_candidates = len(trace_data[trace_data['Classification'].str.startswith('liver protein')])\nprint(f\"\\nTotal Liver Candidates: {liver_candidates}\")\nprint(f\"Non-liver: {len(trace_data[trace_data['Classification'] == 'non-liver protein'])}\")\n# ============================================================================\n# STRATEGY 2: nTPM Threshold-Based Approach\n# ============================================================================\nprint(\"\\n\\n### STRATEGY 2: nTPM Threshold-Based Classification ###\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "liver_candidates",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "liver_candidates = len(trace_data[trace_data['Classification'].str.startswith('liver protein')])\nprint(f\"\\nTotal Liver Candidates: {liver_candidates}\")\nprint(f\"Non-liver: {len(trace_data[trace_data['Classification'] == 'non-liver protein'])}\")\n# ============================================================================\n# STRATEGY 2: nTPM Threshold-Based Approach\n# ============================================================================\nprint(\"\\n\\n### STRATEGY 2: nTPM Threshold-Based Classification ###\")\nprint(\"-\" * 80)\nliver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nprint(f\"\\nTotal genes with nTPM values: {len(liver_genes)}\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "liver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nprint(f\"\\nTotal genes with nTPM values: {len(liver_genes)}\")\n# Analyze nTPM value distribution\nntpm_values = liver_genes['liver_nTPM_value'].values\npercentiles = [25, 50, 75, 90, 95, 99]\nprint(\"\\nnTPM Value Percentiles:\")\nfor p in percentiles:\n    print(f\"  {p}th percentile: {np.percentile(ntpm_values, p):.2f}\")\n# Test different thresholds\nthresholds = [10, 50, 100, 200, 500, 1000]",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "ntpm_values",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "ntpm_values = liver_genes['liver_nTPM_value'].values\npercentiles = [25, 50, 75, 90, 95, 99]\nprint(\"\\nnTPM Value Percentiles:\")\nfor p in percentiles:\n    print(f\"  {p}th percentile: {np.percentile(ntpm_values, p):.2f}\")\n# Test different thresholds\nthresholds = [10, 50, 100, 200, 500, 1000]\nprint(\"\\nGenes above different nTPM thresholds:\")\nfor threshold in thresholds:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "percentiles",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "percentiles = [25, 50, 75, 90, 95, 99]\nprint(\"\\nnTPM Value Percentiles:\")\nfor p in percentiles:\n    print(f\"  {p}th percentile: {np.percentile(ntpm_values, p):.2f}\")\n# Test different thresholds\nthresholds = [10, 50, 100, 200, 500, 1000]\nprint(\"\\nGenes above different nTPM thresholds:\")\nfor threshold in thresholds:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])\n    percentage = (count / len(liver_genes)) * 100",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "thresholds",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "thresholds = [10, 50, 100, 200, 500, 1000]\nprint(\"\\nGenes above different nTPM thresholds:\")\nfor threshold in thresholds:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])\n    percentage = (count / len(liver_genes)) * 100\n    print(f\"  nTPM >= {threshold}: {count} genes ({percentage:.1f}%)\")\n# ============================================================================\n# STRATEGY 3: Weighted Scoring System\n# ============================================================================\nprint(\"\\n\\n### STRATEGY 3: Weighted Scoring System ###\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "trace_data['confidence_score']",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "trace_data['confidence_score'] = trace_data.apply(calculate_confidence_score, axis=1)\n# Classify based on confidence scores\ndef classify_by_confidence(score):\n    if score >= 80:\n        return 'High Confidence'\n    elif score >= 60:\n        return 'Medium-High Confidence'\n    elif score >= 40:\n        return 'Medium Confidence'\n    elif score >= 20:",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "trace_data['confidence_class']",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "trace_data['confidence_class'] = trace_data['confidence_score'].apply(classify_by_confidence)\nprint(\"\\nConfidence-based Classification:\")\nprint(trace_data['confidence_class'].value_counts().sort_index(ascending=False))\nprint(\"\\nTop 10 genes by confidence score:\")\ntop_confidence = trace_data.nlargest(10, 'confidence_score')[['Gene', 'liver_nTPM_value', 'Classification', 'confidence_score']]\nprint(top_confidence.to_string(index=False))\n# ============================================================================\n# STRATEGY 4: Restrictive High-Stringency Approach\n# ============================================================================\nprint(\"\\n\\n### STRATEGY 4: High-Stringency Filtering ###\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "top_confidence",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "top_confidence = trace_data.nlargest(10, 'confidence_score')[['Gene', 'liver_nTPM_value', 'Classification', 'confidence_score']]\nprint(top_confidence.to_string(index=False))\n# ============================================================================\n# STRATEGY 4: Restrictive High-Stringency Approach\n# ============================================================================\nprint(\"\\n\\n### STRATEGY 4: High-Stringency Filtering ###\")\nprint(\"-\" * 80)\n# Define high-stringency criteria\nhigh_stringency = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "high_stringency",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "high_stringency = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True) &\n    (trace_data['liver_nTPM_value'] >= 100)\n]\nprint(f\"\\nHigh-Stringency Criteria:\")\nprint(f\"  - Must have liver in nTPM\")\nprint(f\"  - Must have liver in tissue cluster\")\nprint(f\"  - nTPM value >= 100\")\nprint(f\"\\nResult: {len(high_stringency)} genes\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "very_high_stringency",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "very_high_stringency = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True) &\n    (trace_data['has_liver_enrichment'] == True) &\n    (trace_data['liver_nTPM_value'] >= 200)\n]\nprint(f\"\\nVery High-Stringency Criteria:\")\nprint(f\"  - All 3 criteria must be met\")\nprint(f\"  - nTPM value >= 200\")\nprint(f\"\\nResult: {len(very_high_stringency)} genes\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "known_liver_markers",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "known_liver_markers = [\n    'ALB', 'HP', 'APOA1', 'APOA2', 'APOC3', 'SERPINA1', 'FGA', 'FGB', 'FGG',\n    'CYP3A4', 'CYP2E1', 'FABP1', 'ALDOB', 'ORM1', 'ORM2', 'GC', 'TF',\n    'APOH', 'APOE', 'CRP', 'SAA1', 'SAA2', 'RBP4', 'AMBP', 'SELENOP'\n]\nprint(f\"\\nValidation against {len(known_liver_markers)} known liver markers:\")\nfound_markers = trace_data[trace_data['Gene'].isin(known_liver_markers)]\nprint(f\"  Found in dataset: {len(found_markers)}/{len(known_liver_markers)}\")\nclassified_as_liver = found_markers[found_markers['Classification'].str.startswith('liver protein')]\nprint(f\"  Classified as liver protein: {len(classified_as_liver)}/{len(found_markers)}\")",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "found_markers",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "found_markers = trace_data[trace_data['Gene'].isin(known_liver_markers)]\nprint(f\"  Found in dataset: {len(found_markers)}/{len(known_liver_markers)}\")\nclassified_as_liver = found_markers[found_markers['Classification'].str.startswith('liver protein')]\nprint(f\"  Classified as liver protein: {len(classified_as_liver)}/{len(found_markers)}\")\nif len(found_markers) > 0:\n    print(f\"  Capture rate: {(len(classified_as_liver)/len(found_markers))*100:.1f}%\")\n    print(\"\\nClassification of known markers:\")\n    marker_class = found_markers.groupby('Classification').size()\n    print(marker_class)\n    # Show markers NOT classified as liver",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "classified_as_liver",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "classified_as_liver = found_markers[found_markers['Classification'].str.startswith('liver protein')]\nprint(f\"  Classified as liver protein: {len(classified_as_liver)}/{len(found_markers)}\")\nif len(found_markers) > 0:\n    print(f\"  Capture rate: {(len(classified_as_liver)/len(found_markers))*100:.1f}%\")\n    print(\"\\nClassification of known markers:\")\n    marker_class = found_markers.groupby('Classification').size()\n    print(marker_class)\n    # Show markers NOT classified as liver\n    not_classified = found_markers[~found_markers['Classification'].str.startswith('liver protein')]\n    if len(not_classified) > 0:",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "ax1 = axes[0, 0]\ncurrent_liver = trace_data[trace_data['Classification'].str.startswith('liver protein')]['Classification'].value_counts()\ncolors1 = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#A8E6CF', '#FF8C42', '#95E1D3', '#C7CEEA']\ncurrent_liver.plot(kind='barh', ax=ax1, color=colors1[:len(current_liver)])\nax1.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax1.set_title('Strategy 1: Multi-Criteria Classification', fontsize=12, fontweight='bold')\nax1.grid(axis='x', alpha=0.3)\n# 2. Confidence Score Distribution\nax2 = axes[0, 1]\nconfidence_dist = trace_data['confidence_class'].value_counts().sort_index(ascending=False)",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "current_liver",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "current_liver = trace_data[trace_data['Classification'].str.startswith('liver protein')]['Classification'].value_counts()\ncolors1 = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#A8E6CF', '#FF8C42', '#95E1D3', '#C7CEEA']\ncurrent_liver.plot(kind='barh', ax=ax1, color=colors1[:len(current_liver)])\nax1.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax1.set_title('Strategy 1: Multi-Criteria Classification', fontsize=12, fontweight='bold')\nax1.grid(axis='x', alpha=0.3)\n# 2. Confidence Score Distribution\nax2 = axes[0, 1]\nconfidence_dist = trace_data['confidence_class'].value_counts().sort_index(ascending=False)\ncolors2 = ['#D32F2F', '#FF6B6B', '#FFA726', '#FFE66D', '#E8E8E8']",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "colors1",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "colors1 = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#A8E6CF', '#FF8C42', '#95E1D3', '#C7CEEA']\ncurrent_liver.plot(kind='barh', ax=ax1, color=colors1[:len(current_liver)])\nax1.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax1.set_title('Strategy 1: Multi-Criteria Classification', fontsize=12, fontweight='bold')\nax1.grid(axis='x', alpha=0.3)\n# 2. Confidence Score Distribution\nax2 = axes[0, 1]\nconfidence_dist = trace_data['confidence_class'].value_counts().sort_index(ascending=False)\ncolors2 = ['#D32F2F', '#FF6B6B', '#FFA726', '#FFE66D', '#E8E8E8']\nconfidence_dist.plot(kind='barh', ax=ax2, color=colors2)",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "ax2 = axes[0, 1]\nconfidence_dist = trace_data['confidence_class'].value_counts().sort_index(ascending=False)\ncolors2 = ['#D32F2F', '#FF6B6B', '#FFA726', '#FFE66D', '#E8E8E8']\nconfidence_dist.plot(kind='barh', ax=ax2, color=colors2)\nax2.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax2.set_title('Strategy 3: Confidence Score Classification', fontsize=12, fontweight='bold')\nax2.grid(axis='x', alpha=0.3)\n# 3. nTPM Threshold Comparison\nax3 = axes[1, 0]\nthreshold_data = []",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "confidence_dist",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "confidence_dist = trace_data['confidence_class'].value_counts().sort_index(ascending=False)\ncolors2 = ['#D32F2F', '#FF6B6B', '#FFA726', '#FFE66D', '#E8E8E8']\nconfidence_dist.plot(kind='barh', ax=ax2, color=colors2)\nax2.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax2.set_title('Strategy 3: Confidence Score Classification', fontsize=12, fontweight='bold')\nax2.grid(axis='x', alpha=0.3)\n# 3. nTPM Threshold Comparison\nax3 = axes[1, 0]\nthreshold_data = []\nthreshold_labels = []",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "colors2",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "colors2 = ['#D32F2F', '#FF6B6B', '#FFA726', '#FFE66D', '#E8E8E8']\nconfidence_dist.plot(kind='barh', ax=ax2, color=colors2)\nax2.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax2.set_title('Strategy 3: Confidence Score Classification', fontsize=12, fontweight='bold')\nax2.grid(axis='x', alpha=0.3)\n# 3. nTPM Threshold Comparison\nax3 = axes[1, 0]\nthreshold_data = []\nthreshold_labels = []\nfor threshold in [0, 10, 50, 100, 200, 500, 1000]:",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "ax3",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "ax3 = axes[1, 0]\nthreshold_data = []\nthreshold_labels = []\nfor threshold in [0, 10, 50, 100, 200, 500, 1000]:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])\n    threshold_data.append(count)\n    threshold_labels.append(f'≥{threshold}')\nbars = ax3.barh(threshold_labels, threshold_data, color='#4ECDC4', edgecolor='black', linewidth=1.5)\nax3.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax3.set_title('Strategy 2: nTPM Threshold Impact', fontsize=12, fontweight='bold')",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "threshold_data",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "threshold_data = []\nthreshold_labels = []\nfor threshold in [0, 10, 50, 100, 200, 500, 1000]:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])\n    threshold_data.append(count)\n    threshold_labels.append(f'≥{threshold}')\nbars = ax3.barh(threshold_labels, threshold_data, color='#4ECDC4', edgecolor='black', linewidth=1.5)\nax3.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax3.set_title('Strategy 2: nTPM Threshold Impact', fontsize=12, fontweight='bold')\nax3.grid(axis='x', alpha=0.3)",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "threshold_labels",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "threshold_labels = []\nfor threshold in [0, 10, 50, 100, 200, 500, 1000]:\n    count = len(liver_genes[liver_genes['liver_nTPM_value'] >= threshold])\n    threshold_data.append(count)\n    threshold_labels.append(f'≥{threshold}')\nbars = ax3.barh(threshold_labels, threshold_data, color='#4ECDC4', edgecolor='black', linewidth=1.5)\nax3.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax3.set_title('Strategy 2: nTPM Threshold Impact', fontsize=12, fontweight='bold')\nax3.grid(axis='x', alpha=0.3)\n# Add value labels",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "bars = ax3.barh(threshold_labels, threshold_data, color='#4ECDC4', edgecolor='black', linewidth=1.5)\nax3.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax3.set_title('Strategy 2: nTPM Threshold Impact', fontsize=12, fontweight='bold')\nax3.grid(axis='x', alpha=0.3)\n# Add value labels\nfor i, (bar, val) in enumerate(zip(bars, threshold_data)):\n    ax3.text(val + max(threshold_data)*0.01, i, f'{val}', va='center', fontweight='bold')\n# 4. High-Stringency Tiers\nax4 = axes[1, 1]\nstringency_data = {",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "ax4",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "ax4 = axes[1, 1]\nstringency_data = {\n    'All liver\\ncandidates\\n(any criterion)': liver_candidates,\n    'nTPM only\\n(any value)': len(trace_data[trace_data['has_liver_nTPM'] == True]),\n    'nTPM + cluster\\n(any value)': len(trace_data[(trace_data['has_liver_nTPM'] == True) &\n                                                    (trace_data['has_liver_cluster'] == True)]),\n    'nTPM + cluster\\n(≥100)': len(high_stringency),\n    'All 3 criteria\\n(≥200)': len(very_high_stringency)\n}\ny_pos = np.arange(len(stringency_data))",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "stringency_data",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "stringency_data = {\n    'All liver\\ncandidates\\n(any criterion)': liver_candidates,\n    'nTPM only\\n(any value)': len(trace_data[trace_data['has_liver_nTPM'] == True]),\n    'nTPM + cluster\\n(any value)': len(trace_data[(trace_data['has_liver_nTPM'] == True) &\n                                                    (trace_data['has_liver_cluster'] == True)]),\n    'nTPM + cluster\\n(≥100)': len(high_stringency),\n    'All 3 criteria\\n(≥200)': len(very_high_stringency)\n}\ny_pos = np.arange(len(stringency_data))\ncolors4 = ['#E8E8E8', '#C7CEEA', '#95E1D3', '#4ECDC4', '#FF6B6B']",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "y_pos",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "y_pos = np.arange(len(stringency_data))\ncolors4 = ['#E8E8E8', '#C7CEEA', '#95E1D3', '#4ECDC4', '#FF6B6B']\nbars4 = ax4.barh(y_pos, list(stringency_data.values()), color=colors4, edgecolor='black', linewidth=1.5)\nax4.set_yticks(y_pos)\nax4.set_yticklabels(list(stringency_data.keys()), fontsize=9)\nax4.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax4.set_title('Strategy 4: Progressive Stringency Filtering', fontsize=12, fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n# Add value labels\nfor i, (bar, val) in enumerate(zip(bars4, stringency_data.values())):",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "colors4",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "colors4 = ['#E8E8E8', '#C7CEEA', '#95E1D3', '#4ECDC4', '#FF6B6B']\nbars4 = ax4.barh(y_pos, list(stringency_data.values()), color=colors4, edgecolor='black', linewidth=1.5)\nax4.set_yticks(y_pos)\nax4.set_yticklabels(list(stringency_data.keys()), fontsize=9)\nax4.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax4.set_title('Strategy 4: Progressive Stringency Filtering', fontsize=12, fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n# Add value labels\nfor i, (bar, val) in enumerate(zip(bars4, stringency_data.values())):\n    ax4.text(val + max(stringency_data.values())*0.01, i, f'{val}', va='center', fontweight='bold')",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "bars4",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "bars4 = ax4.barh(y_pos, list(stringency_data.values()), color=colors4, edgecolor='black', linewidth=1.5)\nax4.set_yticks(y_pos)\nax4.set_yticklabels(list(stringency_data.keys()), fontsize=9)\nax4.set_xlabel('Number of Genes', fontsize=11, fontweight='bold')\nax4.set_title('Strategy 4: Progressive Stringency Filtering', fontsize=12, fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n# Add value labels\nfor i, (bar, val) in enumerate(zip(bars4, stringency_data.values())):\n    ax4.text(val + max(stringency_data.values())*0.01, i, f'{val}', va='center', fontweight='bold')\nplt.tight_layout()",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "tier1",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "tier1 = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True) &\n    (trace_data['liver_nTPM_value'] >= 200)\n]\nprint(f\"TIER 1 (Highest Confidence): {len(tier1)} genes\")\nprint(f\"  Criteria: nTPM present + Cluster present + nTPM ≥ 200\")\nprint(f\"  Recommended for: Primary liver-specific protein candidates\")\n# Tier 2: High confidence\ntier2 = trace_data[",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "tier2",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "tier2 = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True) &\n    (trace_data['liver_nTPM_value'] >= 50) &\n    (~trace_data.index.isin(tier1.index))\n]\nprint(f\"\\nTIER 2 (High Confidence): {len(tier2)} genes\")\nprint(f\"  Criteria: nTPM present + Cluster present + nTPM ≥ 50\")\nprint(f\"  Recommended for: Secondary liver-specific candidates\")\n# Tier 3: Medium confidence",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "tier3",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "tier3 = trace_data[\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True) &\n    (~trace_data.index.isin(tier1.index)) &\n    (~trace_data.index.isin(tier2.index))\n]\nprint(f\"\\nTIER 3 (Medium Confidence): {len(tier3)} genes\")\nprint(f\"  Criteria: nTPM present + Cluster present (any nTPM value)\")\nprint(f\"  Recommended for: Potential liver-associated proteins\")\n# Tier 4: Exploratory",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "tier4",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "tier4 = trace_data[\n    (trace_data['Classification'] == 'liver protein (all 3)') &\n    (~trace_data.index.isin(tier1.index)) &\n    (~trace_data.index.isin(tier2.index)) &\n    (~trace_data.index.isin(tier3.index))\n]\nprint(f\"\\nTIER 4 (Exploratory): {len(tier4)} genes\")\nprint(f\"  Criteria: All 3 criteria met but low nTPM OR enrichment-based\")\nprint(f\"  Recommended for: Exploratory validation studies\")\n# Save tier assignments",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "trace_data['recommended_tier']",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "trace_data['recommended_tier'] = 'Not recommended'\ntrace_data.loc[tier1.index, 'recommended_tier'] = 'Tier 1 (Highest)'\ntrace_data.loc[tier2.index, 'recommended_tier'] = 'Tier 2 (High)'\ntrace_data.loc[tier3.index, 'recommended_tier'] = 'Tier 3 (Medium)'\ntrace_data.loc[tier4.index, 'recommended_tier'] = 'Tier 4 (Exploratory)'\n# Save results\noutput_file = 'Trace/classification_strategy_analysis.csv'\ntrace_data.to_csv(output_file, index=False)\nprint(f\"\\n\\nDetailed analysis saved to: {output_file}\")\n# Save tier-specific gene lists",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "advanced_analysis.analyze_classification_strategy",
        "description": "advanced_analysis.analyze_classification_strategy",
        "peekOfCode": "output_file = 'Trace/classification_strategy_analysis.csv'\ntrace_data.to_csv(output_file, index=False)\nprint(f\"\\n\\nDetailed analysis saved to: {output_file}\")\n# Save tier-specific gene lists\nfor tier_name, tier_df in [('tier1', tier1), ('tier2', tier2), ('tier3', tier3), ('tier4', tier4)]:\n    if len(tier_df) > 0:\n        tier_file = f'Trace/{tier_name}_high_confidence_genes.csv'\n        tier_df[['Gene', 'liver_nTPM_value', 'Classification', 'confidence_score']].to_csv(tier_file, index=False)\n        print(f\"  {tier_name} genes saved to: {tier_file}\")\nprint(\"\\n\" + \"=\"*80)",
        "detail": "advanced_analysis.analyze_classification_strategy",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data = pd.read_csv('Trace/classification_strategy_analysis.csv')\n# Define known liver markers as ground truth\nknown_liver_markers = [\n    'ALB', 'HP', 'APOA1', 'APOA2', 'APOC3', 'SERPINA1', 'FGA', 'FGB', 'FGG',\n    'CYP3A4', 'CYP2E1', 'FABP1', 'ALDOB', 'ORM1', 'ORM2', 'GC', 'TF',\n    'APOH', 'APOE', 'CRP', 'SAA1', 'SAA2', 'RBP4', 'AMBP', 'SELENOP',\n    'HRG', 'F2', 'FTL', 'AHSG', 'C3', 'HPX', 'VTN', 'ITIH4', 'ITIH3',\n    'FETUB', 'KNG1', 'SERPINC1', 'SERPIND1', 'F9', 'F10', 'F11',\n    'CYP1A2', 'CYP2A6', 'CYP2C8', 'CYP2C9', 'CYP2D6',\n    'UGT1A1', 'UGT2B7', 'GSTA1', 'GSTA2', 'G6PC', 'PCK1'",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "known_liver_markers",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "known_liver_markers = [\n    'ALB', 'HP', 'APOA1', 'APOA2', 'APOC3', 'SERPINA1', 'FGA', 'FGB', 'FGG',\n    'CYP3A4', 'CYP2E1', 'FABP1', 'ALDOB', 'ORM1', 'ORM2', 'GC', 'TF',\n    'APOH', 'APOE', 'CRP', 'SAA1', 'SAA2', 'RBP4', 'AMBP', 'SELENOP',\n    'HRG', 'F2', 'FTL', 'AHSG', 'C3', 'HPX', 'VTN', 'ITIH4', 'ITIH3',\n    'FETUB', 'KNG1', 'SERPINC1', 'SERPIND1', 'F9', 'F10', 'F11',\n    'CYP1A2', 'CYP2A6', 'CYP2C8', 'CYP2C9', 'CYP2D6',\n    'UGT1A1', 'UGT2B7', 'GSTA1', 'GSTA2', 'G6PC', 'PCK1'\n]\n# Create ground truth labels",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['is_known_liver']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['is_known_liver'] = trace_data['Gene'].isin(known_liver_markers).astype(int)\nknown_count = trace_data['is_known_liver'].sum()\nprint(f\"\\nKnown liver markers in dataset: {known_count}\")\nprint(f\"Total genes: {len(trace_data)}\")\n# Create binary predictions based on different criteria\n# We'll test multiple classification strategies\n# Strategy 1: Confidence score threshold\ntrace_data['pred_confidence'] = (trace_data['confidence_score'] >= 60).astype(int)\n# Strategy 2: nTPM threshold\ntrace_data['pred_ntpm'] = (trace_data['liver_nTPM_value'] >= 100).astype(int)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "known_count",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "known_count = trace_data['is_known_liver'].sum()\nprint(f\"\\nKnown liver markers in dataset: {known_count}\")\nprint(f\"Total genes: {len(trace_data)}\")\n# Create binary predictions based on different criteria\n# We'll test multiple classification strategies\n# Strategy 1: Confidence score threshold\ntrace_data['pred_confidence'] = (trace_data['confidence_score'] >= 60).astype(int)\n# Strategy 2: nTPM threshold\ntrace_data['pred_ntpm'] = (trace_data['liver_nTPM_value'] >= 100).astype(int)\ntrace_data['pred_ntpm'].fillna(0, inplace=True)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['pred_confidence']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['pred_confidence'] = (trace_data['confidence_score'] >= 60).astype(int)\n# Strategy 2: nTPM threshold\ntrace_data['pred_ntpm'] = (trace_data['liver_nTPM_value'] >= 100).astype(int)\ntrace_data['pred_ntpm'].fillna(0, inplace=True)\n# Strategy 3: Multi-criteria (2 or more)\ntrace_data['criteria_count'] = (\n    trace_data['has_liver_nTPM'].fillna(False).astype(int) +\n    trace_data['has_liver_cluster'].fillna(False).astype(int) +\n    trace_data['has_liver_enrichment'].fillna(False).astype(int)\n)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['pred_ntpm']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['pred_ntpm'] = (trace_data['liver_nTPM_value'] >= 100).astype(int)\ntrace_data['pred_ntpm'].fillna(0, inplace=True)\n# Strategy 3: Multi-criteria (2 or more)\ntrace_data['criteria_count'] = (\n    trace_data['has_liver_nTPM'].fillna(False).astype(int) +\n    trace_data['has_liver_cluster'].fillna(False).astype(int) +\n    trace_data['has_liver_enrichment'].fillna(False).astype(int)\n)\ntrace_data['pred_multicriteria'] = (trace_data['criteria_count'] >= 2).astype(int)\n# Strategy 4: Tier 1 classification",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['criteria_count']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['criteria_count'] = (\n    trace_data['has_liver_nTPM'].fillna(False).astype(int) +\n    trace_data['has_liver_cluster'].fillna(False).astype(int) +\n    trace_data['has_liver_enrichment'].fillna(False).astype(int)\n)\ntrace_data['pred_multicriteria'] = (trace_data['criteria_count'] >= 2).astype(int)\n# Strategy 4: Tier 1 classification\ntrace_data['pred_tier1'] = (trace_data['recommended_tier'] == 'Tier 1 (Highest)').astype(int)\n# Strategy 5: nTPM + cluster\ntrace_data['pred_ntpm_cluster'] = (",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['pred_multicriteria']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['pred_multicriteria'] = (trace_data['criteria_count'] >= 2).astype(int)\n# Strategy 4: Tier 1 classification\ntrace_data['pred_tier1'] = (trace_data['recommended_tier'] == 'Tier 1 (Highest)').astype(int)\n# Strategy 5: nTPM + cluster\ntrace_data['pred_ntpm_cluster'] = (\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True)\n).astype(int)\n# Create figure with multiple subplots\nfig = plt.figure(figsize=(20, 13))",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['pred_tier1']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['pred_tier1'] = (trace_data['recommended_tier'] == 'Tier 1 (Highest)').astype(int)\n# Strategy 5: nTPM + cluster\ntrace_data['pred_ntpm_cluster'] = (\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True)\n).astype(int)\n# Create figure with multiple subplots\nfig = plt.figure(figsize=(20, 13))\n# ============================================================================\n# 1. ROC Curves Comparison (Top Left)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "trace_data['pred_ntpm_cluster']",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "trace_data['pred_ntpm_cluster'] = (\n    (trace_data['has_liver_nTPM'] == True) &\n    (trace_data['has_liver_cluster'] == True)\n).astype(int)\n# Create figure with multiple subplots\nfig = plt.figure(figsize=(20, 13))\n# ============================================================================\n# 1. ROC Curves Comparison (Top Left)\n# ============================================================================\nax1 = plt.subplot(2, 3, 1)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "fig = plt.figure(figsize=(20, 13))\n# ============================================================================\n# 1. ROC Curves Comparison (Top Left)\n# ============================================================================\nax1 = plt.subplot(2, 3, 1)\nstrategies = {\n    'Confidence Score ≥60': ('confidence_score', trace_data['confidence_score'].fillna(0)),\n    'nTPM Threshold ≥100': ('pred_ntpm', trace_data['liver_nTPM_value'].fillna(0)),\n    'Multi-Criteria (≥2)': ('criteria_count', trace_data['criteria_count']),\n    'nTPM+Cluster (any nTPM)': ('pred_ntpm_cluster', trace_data['pred_ntpm_cluster']),",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax1 = plt.subplot(2, 3, 1)\nstrategies = {\n    'Confidence Score ≥60': ('confidence_score', trace_data['confidence_score'].fillna(0)),\n    'nTPM Threshold ≥100': ('pred_ntpm', trace_data['liver_nTPM_value'].fillna(0)),\n    'Multi-Criteria (≥2)': ('criteria_count', trace_data['criteria_count']),\n    'nTPM+Cluster (any nTPM)': ('pred_ntpm_cluster', trace_data['pred_ntpm_cluster']),\n    'nTPM+Cluster (≥200)': ('pred_tier1', trace_data['pred_tier1'])\n}\ncolors = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#95E1D3', '#FF8C42']\ny_true = trace_data['is_known_liver']",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "strategies",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "strategies = {\n    'Confidence Score ≥60': ('confidence_score', trace_data['confidence_score'].fillna(0)),\n    'nTPM Threshold ≥100': ('pred_ntpm', trace_data['liver_nTPM_value'].fillna(0)),\n    'Multi-Criteria (≥2)': ('criteria_count', trace_data['criteria_count']),\n    'nTPM+Cluster (any nTPM)': ('pred_ntpm_cluster', trace_data['pred_ntpm_cluster']),\n    'nTPM+Cluster (≥200)': ('pred_tier1', trace_data['pred_tier1'])\n}\ncolors = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#95E1D3', '#FF8C42']\ny_true = trace_data['is_known_liver']\nroc_results = {}",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "colors = ['#FF6B6B', '#4ECDC4', '#FFE66D', '#95E1D3', '#FF8C42']\ny_true = trace_data['is_known_liver']\nroc_results = {}\nfor (label, (col, scores)), color in zip(strategies.items(), colors):\n    fpr, tpr, thresholds = roc_curve(y_true, scores)\n    roc_auc = auc(fpr, tpr)\n    roc_results[label] = {'fpr': fpr, 'tpr': tpr, 'auc': roc_auc}\n    ax1.plot(fpr, tpr, color=color, linewidth=2.5,\n             label=f'{label} (AUC = {roc_auc:.3f})')\nax1.plot([0, 1], [0, 1], 'k--', linewidth=2, label='Random Classifier')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "y_true",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "y_true = trace_data['is_known_liver']\nroc_results = {}\nfor (label, (col, scores)), color in zip(strategies.items(), colors):\n    fpr, tpr, thresholds = roc_curve(y_true, scores)\n    roc_auc = auc(fpr, tpr)\n    roc_results[label] = {'fpr': fpr, 'tpr': tpr, 'auc': roc_auc}\n    ax1.plot(fpr, tpr, color=color, linewidth=2.5,\n             label=f'{label} (AUC = {roc_auc:.3f})')\nax1.plot([0, 1], [0, 1], 'k--', linewidth=2, label='Random Classifier')\nax1.set_xlabel('False Positive Rate', fontsize=12, fontweight='bold')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "roc_results",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "roc_results = {}\nfor (label, (col, scores)), color in zip(strategies.items(), colors):\n    fpr, tpr, thresholds = roc_curve(y_true, scores)\n    roc_auc = auc(fpr, tpr)\n    roc_results[label] = {'fpr': fpr, 'tpr': tpr, 'auc': roc_auc}\n    ax1.plot(fpr, tpr, color=color, linewidth=2.5,\n             label=f'{label} (AUC = {roc_auc:.3f})')\nax1.plot([0, 1], [0, 1], 'k--', linewidth=2, label='Random Classifier')\nax1.set_xlabel('False Positive Rate', fontsize=12, fontweight='bold')\nax1.set_ylabel('True Positive Rate', fontsize=12, fontweight='bold')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax2 = plt.subplot(2, 3, 2)\nfor (label, (col, scores)), color in zip(strategies.items(), colors):\n    precision, recall, thresholds = precision_recall_curve(y_true, scores)\n    avg_precision = average_precision_score(y_true, scores)\n    ax2.plot(recall, precision, color=color, linewidth=2.5,\n             label=f'{label} (AP = {avg_precision:.3f})')\nax2.set_xlabel('Recall', fontsize=12, fontweight='bold')\nax2.set_ylabel('Precision', fontsize=12, fontweight='bold')\nax2.set_title('Precision-Recall Curves', fontsize=14, fontweight='bold', pad=15)\nax2.legend(loc='upper right', fontsize=8.5, framealpha=0.95)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax3",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax3 = plt.subplot(2, 3, 3)\ny_pred_ntpm = trace_data['pred_ntpm']\ncm = confusion_matrix(y_true, y_pred_ntpm)\nim = ax3.imshow(cm, cmap='Blues', alpha=0.8)\nax3.set_xticks([0, 1])\nax3.set_yticks([0, 1])\nax3.set_xticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_yticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_xlabel('Predicted', fontsize=12, fontweight='bold')\nax3.set_ylabel('True (Known Markers)', fontsize=12, fontweight='bold')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "y_pred_ntpm",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "y_pred_ntpm = trace_data['pred_ntpm']\ncm = confusion_matrix(y_true, y_pred_ntpm)\nim = ax3.imshow(cm, cmap='Blues', alpha=0.8)\nax3.set_xticks([0, 1])\nax3.set_yticks([0, 1])\nax3.set_xticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_yticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_xlabel('Predicted', fontsize=12, fontweight='bold')\nax3.set_ylabel('True (Known Markers)', fontsize=12, fontweight='bold')\nax3.set_title('Confusion Matrix: nTPM Threshold ≥100\\n(Best Overall Performance)', fontsize=13, fontweight='bold', pad=15)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "cm = confusion_matrix(y_true, y_pred_ntpm)\nim = ax3.imshow(cm, cmap='Blues', alpha=0.8)\nax3.set_xticks([0, 1])\nax3.set_yticks([0, 1])\nax3.set_xticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_yticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_xlabel('Predicted', fontsize=12, fontweight='bold')\nax3.set_ylabel('True (Known Markers)', fontsize=12, fontweight='bold')\nax3.set_title('Confusion Matrix: nTPM Threshold ≥100\\n(Best Overall Performance)', fontsize=13, fontweight='bold', pad=15)\n# Add text annotations",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "im",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "im = ax3.imshow(cm, cmap='Blues', alpha=0.8)\nax3.set_xticks([0, 1])\nax3.set_yticks([0, 1])\nax3.set_xticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_yticklabels(['Not Liver', 'Liver'], fontsize=11)\nax3.set_xlabel('Predicted', fontsize=12, fontweight='bold')\nax3.set_ylabel('True (Known Markers)', fontsize=12, fontweight='bold')\nax3.set_title('Confusion Matrix: nTPM Threshold ≥100\\n(Best Overall Performance)', fontsize=13, fontweight='bold', pad=15)\n# Add text annotations\nfor i in range(2):",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "cbar",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "cbar = plt.colorbar(im, ax=ax3)\ncbar.set_label('Count', fontsize=10)\n# ============================================================================\n# 4. Performance Metrics Comparison (Bottom Left)\n# ============================================================================\nax4 = plt.subplot(2, 3, 4)\nmetrics_data = []\nfor label, (col, scores) in strategies.items():\n    if label == 'nTPM Threshold ≥100':\n        y_pred = trace_data['pred_ntpm']",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax4",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax4 = plt.subplot(2, 3, 4)\nmetrics_data = []\nfor label, (col, scores) in strategies.items():\n    if label == 'nTPM Threshold ≥100':\n        y_pred = trace_data['pred_ntpm']\n    elif label == 'Multi-Criteria (≥2)':\n        y_pred = trace_data['pred_multicriteria']\n    elif label == 'nTPM+Cluster (≥200)':\n        y_pred = trace_data['pred_tier1']\n    elif label == 'nTPM+Cluster (any nTPM)':",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "metrics_data",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "metrics_data = []\nfor label, (col, scores) in strategies.items():\n    if label == 'nTPM Threshold ≥100':\n        y_pred = trace_data['pred_ntpm']\n    elif label == 'Multi-Criteria (≥2)':\n        y_pred = trace_data['pred_multicriteria']\n    elif label == 'nTPM+Cluster (≥200)':\n        y_pred = trace_data['pred_tier1']\n    elif label == 'nTPM+Cluster (any nTPM)':\n        y_pred = trace_data['pred_ntpm_cluster']",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "metrics_df",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "metrics_df = pd.DataFrame(metrics_data)\nx = np.arange(len(metrics_df))\nwidth = 0.2\nbars1 = ax4.bar(x - 1.5*width, metrics_df['Sensitivity'], width, label='Sensitivity', color='#FF6B6B', alpha=0.8)\nbars2 = ax4.bar(x - 0.5*width, metrics_df['Specificity'], width, label='Specificity', color='#4ECDC4', alpha=0.8)\nbars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "x = np.arange(len(metrics_df))\nwidth = 0.2\nbars1 = ax4.bar(x - 1.5*width, metrics_df['Sensitivity'], width, label='Sensitivity', color='#FF6B6B', alpha=0.8)\nbars2 = ax4.bar(x - 0.5*width, metrics_df['Specificity'], width, label='Specificity', color='#4ECDC4', alpha=0.8)\nbars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "width = 0.2\nbars1 = ax4.bar(x - 1.5*width, metrics_df['Sensitivity'], width, label='Sensitivity', color='#FF6B6B', alpha=0.8)\nbars2 = ax4.bar(x - 0.5*width, metrics_df['Specificity'], width, label='Specificity', color='#4ECDC4', alpha=0.8)\nbars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')\nax4.legend(loc='upper left', fontsize=9.5, framealpha=0.95)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "bars1",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "bars1 = ax4.bar(x - 1.5*width, metrics_df['Sensitivity'], width, label='Sensitivity', color='#FF6B6B', alpha=0.8)\nbars2 = ax4.bar(x - 0.5*width, metrics_df['Specificity'], width, label='Specificity', color='#4ECDC4', alpha=0.8)\nbars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')\nax4.legend(loc='upper left', fontsize=9.5, framealpha=0.95)\nax4.set_ylim(0, 1.1)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "bars2",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "bars2 = ax4.bar(x - 0.5*width, metrics_df['Specificity'], width, label='Specificity', color='#4ECDC4', alpha=0.8)\nbars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')\nax4.legend(loc='upper left', fontsize=9.5, framealpha=0.95)\nax4.set_ylim(0, 1.1)\nax4.grid(axis='y', alpha=0.3)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "bars3",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "bars3 = ax4.bar(x + 0.5*width, metrics_df['Precision'], width, label='Precision', color='#FFE66D', alpha=0.8)\nbars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')\nax4.legend(loc='upper left', fontsize=9.5, framealpha=0.95)\nax4.set_ylim(0, 1.1)\nax4.grid(axis='y', alpha=0.3)\n# ============================================================================",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "bars4",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "bars4 = ax4.bar(x + 1.5*width, metrics_df['F1-Score'], width, label='F1-Score', color='#95E1D3', alpha=0.8)\nax4.set_ylabel('Score', fontsize=12, fontweight='bold')\nax4.set_title('Performance Metrics Comparison', fontsize=14, fontweight='bold', pad=15)\nax4.set_xticks(x)\nax4.set_xticklabels(metrics_df['Strategy'], fontsize=7.5, rotation=0, ha='center')\nax4.legend(loc='upper left', fontsize=9.5, framealpha=0.95)\nax4.set_ylim(0, 1.1)\nax4.grid(axis='y', alpha=0.3)\n# ============================================================================\n# 5. Score Distribution (Bottom Middle)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax5",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax5 = plt.subplot(2, 3, 5)\nknown_liver = trace_data[trace_data['is_known_liver'] == 1]['confidence_score']\nnon_liver = trace_data[trace_data['is_known_liver'] == 0]['confidence_score']\nax5.hist(non_liver, bins=30, alpha=0.6, label='Non-liver proteins', color='#E8E8E8', edgecolor='black')\nax5.hist(known_liver, bins=15, alpha=0.8, label='Known liver markers', color='#FF6B6B', edgecolor='black')\nax5.axvline(60, color='red', linestyle='--', linewidth=2.5, label='Threshold = 60')\nax5.set_xlabel('Confidence Score', fontsize=12, fontweight='bold')\nax5.set_ylabel('Frequency', fontsize=12, fontweight='bold')\nax5.set_title('Confidence Score Distribution', fontsize=14, fontweight='bold', pad=15)\nax5.legend(loc='upper right', fontsize=9.5, framealpha=0.95)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "known_liver",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "known_liver = trace_data[trace_data['is_known_liver'] == 1]['confidence_score']\nnon_liver = trace_data[trace_data['is_known_liver'] == 0]['confidence_score']\nax5.hist(non_liver, bins=30, alpha=0.6, label='Non-liver proteins', color='#E8E8E8', edgecolor='black')\nax5.hist(known_liver, bins=15, alpha=0.8, label='Known liver markers', color='#FF6B6B', edgecolor='black')\nax5.axvline(60, color='red', linestyle='--', linewidth=2.5, label='Threshold = 60')\nax5.set_xlabel('Confidence Score', fontsize=12, fontweight='bold')\nax5.set_ylabel('Frequency', fontsize=12, fontweight='bold')\nax5.set_title('Confidence Score Distribution', fontsize=14, fontweight='bold', pad=15)\nax5.legend(loc='upper right', fontsize=9.5, framealpha=0.95)\nax5.grid(axis='y', alpha=0.3)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "non_liver",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "non_liver = trace_data[trace_data['is_known_liver'] == 0]['confidence_score']\nax5.hist(non_liver, bins=30, alpha=0.6, label='Non-liver proteins', color='#E8E8E8', edgecolor='black')\nax5.hist(known_liver, bins=15, alpha=0.8, label='Known liver markers', color='#FF6B6B', edgecolor='black')\nax5.axvline(60, color='red', linestyle='--', linewidth=2.5, label='Threshold = 60')\nax5.set_xlabel('Confidence Score', fontsize=12, fontweight='bold')\nax5.set_ylabel('Frequency', fontsize=12, fontweight='bold')\nax5.set_title('Confidence Score Distribution', fontsize=14, fontweight='bold', pad=15)\nax5.legend(loc='upper right', fontsize=9.5, framealpha=0.95)\nax5.grid(axis='y', alpha=0.3)\n# ============================================================================",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ax6",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ax6 = plt.subplot(2, 3, 6)\nax6.axis('off')\n# Create summary table\nsummary_data = []\nfor label, (col, scores) in strategies.items():\n    roc_auc = roc_results[label]['auc']\n    avg_precision = average_precision_score(y_true, scores)\n    if label == 'nTPM Threshold ≥100':\n        y_pred = trace_data['pred_ntpm']\n    elif label == 'Multi-Criteria (≥2)':",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "summary_data",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "summary_data = []\nfor label, (col, scores) in strategies.items():\n    roc_auc = roc_results[label]['auc']\n    avg_precision = average_precision_score(y_true, scores)\n    if label == 'nTPM Threshold ≥100':\n        y_pred = trace_data['pred_ntpm']\n    elif label == 'Multi-Criteria (≥2)':\n        y_pred = trace_data['pred_multicriteria']\n    elif label == 'nTPM+Cluster (≥200)':\n        y_pred = trace_data['pred_tier1']",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "column_labels",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "column_labels = ['Strategy', 'AUC', 'AP', 'TP/P', 'TN/N']\ntable = ax6.table(cellText=summary_data, colLabels=column_labels,\n                  cellLoc='center', loc='center',\n                  colWidths=[0.38, 0.14, 0.14, 0.16, 0.18])\ntable.auto_set_font_size(False)\ntable.set_fontsize(9)\ntable.scale(1, 2.8)\n# Style header\nfor i in range(len(column_labels)):\n    cell = table[(0, i)]",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "table = ax6.table(cellText=summary_data, colLabels=column_labels,\n                  cellLoc='center', loc='center',\n                  colWidths=[0.38, 0.14, 0.14, 0.16, 0.18])\ntable.auto_set_font_size(False)\ntable.set_fontsize(9)\ntable.scale(1, 2.8)\n# Style header\nfor i in range(len(column_labels)):\n    cell = table[(0, i)]\n    cell.set_facecolor('#4A90E2')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "row_colors",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "row_colors = colors\nfor i in range(len(summary_data)):\n    for j in range(len(column_labels)):\n        cell = table[(i+1, j)]\n        cell.set_facecolor(row_colors[i])\n        cell.set_alpha(0.3)\n        cell.set_text_props(fontsize=9)\nax6.set_title('Performance Summary', fontsize=14, fontweight='bold', pad=25)\nplt.tight_layout()\nplt.savefig('output/roc_auc_analysis.png', dpi=300, bbox_inches='tight')",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "ap_scores",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "ap_scores = {}\nfor label, (col, scores) in strategies.items():\n    ap_scores[label] = average_precision_score(y_true, scores)\n# Find best strategies\nbest_auc = max(roc_results.items(), key=lambda x: x[1]['auc'])\nbest_ap = max(ap_scores.items(), key=lambda x: x[1])\nprint(f\"\\nBest by AUC-ROC: {best_auc[0]}\")\nprint(f\"  AUC-ROC: {best_auc[1]['auc']:.3f}\")\nprint(f\"\\nBest by AP (Average Precision): {best_ap[0]}\")\nprint(f\"  AP: {best_ap[1]:.3f}\")",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "best_auc",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "best_auc = max(roc_results.items(), key=lambda x: x[1]['auc'])\nbest_ap = max(ap_scores.items(), key=lambda x: x[1])\nprint(f\"\\nBest by AUC-ROC: {best_auc[0]}\")\nprint(f\"  AUC-ROC: {best_auc[1]['auc']:.3f}\")\nprint(f\"\\nBest by AP (Average Precision): {best_ap[0]}\")\nprint(f\"  AP: {best_ap[1]:.3f}\")\n# Combined recommendation\nprint(\"\\n\" + \"-\"*80)\nprint(\"STRATEGY RECOMMENDATIONS BY USE CASE:\")\nprint(\"-\"*80)",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "best_ap",
        "kind": 5,
        "importPath": "advanced_analysis.generate_roc_curve",
        "description": "advanced_analysis.generate_roc_curve",
        "peekOfCode": "best_ap = max(ap_scores.items(), key=lambda x: x[1])\nprint(f\"\\nBest by AUC-ROC: {best_auc[0]}\")\nprint(f\"  AUC-ROC: {best_auc[1]['auc']:.3f}\")\nprint(f\"\\nBest by AP (Average Precision): {best_ap[0]}\")\nprint(f\"  AP: {best_ap[1]:.3f}\")\n# Combined recommendation\nprint(\"\\n\" + \"-\"*80)\nprint(\"STRATEGY RECOMMENDATIONS BY USE CASE:\")\nprint(\"-\"*80)\nprint(\"\\nFor liver protein classification, we recommend:\")",
        "detail": "advanced_analysis.generate_roc_curve",
        "documentation": {}
    },
    {
        "label": "extract_liver_ntpm",
        "kind": 2,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "def extract_liver_ntpm(text):\n    if pd.isna(text) or text == '':\n        return None\n    # Search for pattern \"liver: number\" or \"liver:number\"\n    pattern = r'liver:\\s*(\\d+\\.?\\d*)'\n    match = re.search(pattern, str(text).lower())\n    if match:\n        return float(match.group(1))\n    return None\n# Classification based on the criteria",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "classify_liver_protein",
        "kind": 2,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "def classify_liver_protein(row):\n    has_ntpm_high = row['has_liver_nTPM_high']\n    has_ntpm_low = row['has_liver_nTPM_low']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met (treating high and low nTPM as separate)\n    conditions = [has_ntpm_high, has_ntpm_low, has_cluster, has_enrichment]\n    count = sum(conditions)\n    if count == 0:\n        return 'non-liver protein'",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "csv_files",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "csv_files = glob.glob('input/*.csv')\nif not csv_files:\n    raise FileNotFoundError(\"No CSV file found in input folder\")\nif len(csv_files) > 1:\n    print(f\"Warning: Multiple CSV files found. Using: {csv_files[0]}\")\n    print(f\"Other files: {csv_files[1:]}\")\ngene_data_file = csv_files[0]\nprint(f\"Loading gene data from: {gene_data_file}\")\ngene_data = pd.read_csv(gene_data_file)\n# Load protein atlas TSV file",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "gene_data_file",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "gene_data_file = csv_files[0]\nprint(f\"Loading gene data from: {gene_data_file}\")\ngene_data = pd.read_csv(gene_data_file)\n# Load protein atlas TSV file\nprotein_atlas = pd.read_csv('input/proteinatlas.tsv', sep='\\t')\n# Extract Gene column from gene_data (it's in the \"Gene\" column)\nprint(f\"Total genes in input file: {len(gene_data)}\")\nprint(f\"Total genes in protein atlas: {len(protein_atlas)}\")\n# Merge the two dataframes on Gene column\nmerged_data = gene_data.merge(",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "gene_data",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "gene_data = pd.read_csv(gene_data_file)\n# Load protein atlas TSV file\nprotein_atlas = pd.read_csv('input/proteinatlas.tsv', sep='\\t')\n# Extract Gene column from gene_data (it's in the \"Gene\" column)\nprint(f\"Total genes in input file: {len(gene_data)}\")\nprint(f\"Total genes in protein atlas: {len(protein_atlas)}\")\n# Merge the two dataframes on Gene column\nmerged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "protein_atlas",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "protein_atlas = pd.read_csv('input/proteinatlas.tsv', sep='\\t')\n# Extract Gene column from gene_data (it's in the \"Gene\" column)\nprint(f\"Total genes in input file: {len(gene_data)}\")\nprint(f\"Total genes in protein atlas: {len(protein_atlas)}\")\n# Merge the two dataframes on Gene column\nmerged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',\n    how='left'\n)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',\n    how='left'\n)\nprint(f\"Total merged records: {len(merged_data)}\")\n# Function to extract liver nTPM value\ndef extract_liver_ntpm(text):\n    if pd.isna(text) or text == '':\n        return None",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['liver_nTPM_value']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['liver_nTPM_value'] = merged_data['RNA tissue specific nTPM'].apply(extract_liver_ntpm)\n# Split nTPM into two categories: high (>=100) and low (<100)\nmerged_data['has_liver_in_ntpm'] = merged_data['RNA tissue specific nTPM'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_nTPM_high'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] >= 100)\n)\nmerged_data['has_liver_nTPM_low'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] < 100)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_in_ntpm']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_in_ntpm'] = merged_data['RNA tissue specific nTPM'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_nTPM_high'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] >= 100)\n)\nmerged_data['has_liver_nTPM_low'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] < 100)\n)\nmerged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_nTPM_high']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_nTPM_high'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] >= 100)\n)\nmerged_data['has_liver_nTPM_low'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] < 100)\n)\nmerged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_nTPM_low']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_nTPM_low'] = (\n    merged_data['has_liver_in_ntpm'] &\n    (merged_data['liver_nTPM_value'] < 100)\n)\nmerged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm_high = row['has_liver_nTPM_high']\n    has_ntpm_low = row['has_liver_nTPM_low']",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_cluster']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm_high = row['has_liver_nTPM_high']\n    has_ntpm_low = row['has_liver_nTPM_low']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met (treating high and low nTPM as separate)\n    conditions = [has_ntpm_high, has_ntpm_low, has_cluster, has_enrichment]",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_enrichment']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm_high = row['has_liver_nTPM_high']\n    has_ntpm_low = row['has_liver_nTPM_low']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met (treating high and low nTPM as separate)\n    conditions = [has_ntpm_high, has_ntpm_low, has_cluster, has_enrichment]\n    count = sum(conditions)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['Classification']",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "merged_data['Classification'] = merged_data.apply(classify_liver_protein, axis=1)\n# Count each category\nclassification_counts = merged_data['Classification'].value_counts()\nprint(\"\\nClassification Results:\")\nprint(classification_counts)\n# Print statistics about extracted liver nTPM values\nliver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "classification_counts",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "classification_counts = merged_data['Classification'].value_counts()\nprint(\"\\nClassification Results:\")\nprint(classification_counts)\n# Print statistics about extracted liver nTPM values\nliver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")\n    print(f\"Mean: {liver_ntpm_stats.mean():.2f}\")\n    print(f\"Median: {liver_ntpm_stats.median():.2f}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_ntpm_stats",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")\n    print(f\"Mean: {liver_ntpm_stats.mean():.2f}\")\n    print(f\"Median: {liver_ntpm_stats.median():.2f}\")\n    print(f\"Min: {liver_ntpm_stats.min():.2f}\")\n    print(f\"Max: {liver_ntpm_stats.max():.2f}\")\n# Get gene lists for Venn diagram (4 categories)\nall_genes = set(merged_data['Gene'].tolist())",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "all_genes = set(merged_data['Gene'].tolist())\nliver_ntpm_high_genes = set(merged_data[merged_data['has_liver_nTPM_high']]['Gene'].tolist())\nliver_ntpm_low_genes = set(merged_data[merged_data['has_liver_nTPM_low']]['Gene'].tolist())\nliver_cluster_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_enrichment_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_ntpm_high_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_ntpm_high_genes = set(merged_data[merged_data['has_liver_nTPM_high']]['Gene'].tolist())\nliver_ntpm_low_genes = set(merged_data[merged_data['has_liver_nTPM_low']]['Gene'].tolist())\nliver_cluster_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_enrichment_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_ntpm_low_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_ntpm_low_genes = set(merged_data[merged_data['has_liver_nTPM_low']]['Gene'].tolist())\nliver_cluster_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_enrichment_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_cluster_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_cluster_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_enrichment_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_enrichment_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_enrichment_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver nTPM ≥100: {len(liver_ntpm_high_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "total_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "total_genes = len(all_genes)\nliver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver nTPM ≥100: {len(liver_ntpm_high_genes)}\")\nprint(f\"Genes with liver nTPM <100: {len(liver_ntpm_low_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_candidates_set",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_candidates_set = liver_ntpm_high_genes | liver_ntpm_low_genes | liver_cluster_genes | liver_enrichment_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver nTPM ≥100: {len(liver_ntpm_high_genes)}\")\nprint(f\"Genes with liver nTPM <100: {len(liver_ntpm_low_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_cluster_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_candidates",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver nTPM ≥100: {len(liver_ntpm_high_genes)}\")\nprint(f\"Genes with liver nTPM <100: {len(liver_ntpm_low_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_cluster_genes)}\")\nprint(f\"Genes with liver in RNA tissue cell type enrichment: {len(liver_enrichment_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "non_liver_genes",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "non_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics (4 categories):\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver nTPM ≥100: {len(liver_ntpm_high_genes)}\")\nprint(f\"Genes with liver nTPM <100: {len(liver_ntpm_low_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_cluster_genes)}\")\nprint(f\"Genes with liver in RNA tissue cell type enrichment: {len(liver_enrichment_genes)}\")\nprint(f\"Genes in all 4 categories: {len(liver_ntpm_high_genes & liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "fig = plt.figure(figsize=(20, 10))\n# Add overall title with statistics\ntitle_text = f'Liver Protein Classification (4 Criteria: nTPM Split by Threshold 100)'\nsubtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'\nfig.suptitle(title_text, fontsize=18, fontweight='bold', y=0.98)\nplt.text(0.5, 0.93, subtitle_text, ha='center', fontsize=13, transform=fig.transFigure)\n# Left subplot: nTPM >= 100 with cluster and enrichment\nax1 = fig.add_subplot(121)\nvenn1 = venn3(\n    [liver_ntpm_high_genes, liver_cluster_genes, liver_enrichment_genes],",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "title_text",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "title_text = f'Liver Protein Classification (4 Criteria: nTPM Split by Threshold 100)'\nsubtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'\nfig.suptitle(title_text, fontsize=18, fontweight='bold', y=0.98)\nplt.text(0.5, 0.93, subtitle_text, ha='center', fontsize=13, transform=fig.transFigure)\n# Left subplot: nTPM >= 100 with cluster and enrichment\nax1 = fig.add_subplot(121)\nvenn1 = venn3(\n    [liver_ntpm_high_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FF6B6B', '#87CEEB', '#98FB98'),",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "subtitle_text",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "subtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'\nfig.suptitle(title_text, fontsize=18, fontweight='bold', y=0.98)\nplt.text(0.5, 0.93, subtitle_text, ha='center', fontsize=13, transform=fig.transFigure)\n# Left subplot: nTPM >= 100 with cluster and enrichment\nax1 = fig.add_subplot(121)\nvenn1 = venn3(\n    [liver_ntpm_high_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FF6B6B', '#87CEEB', '#98FB98'),\n    alpha=0.65,",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ax1 = fig.add_subplot(121)\nvenn1 = venn3(\n    [liver_ntpm_high_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FF6B6B', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax1\n)\nax1.set_title('nTPM ≥ 100 (liver mentioned)', fontsize=14, fontweight='bold', pad=15)\n# Customize subset labels for left diagram (nTPM >= 100)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "venn1",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "venn1 = venn3(\n    [liver_ntpm_high_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FF6B6B', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax1\n)\nax1.set_title('nTPM ≥ 100 (liver mentioned)', fontsize=14, fontweight='bold', pad=15)\n# Customize subset labels for left diagram (nTPM >= 100)\nonly_ntpm_high = len(liver_ntpm_high_genes - liver_cluster_genes - liver_enrichment_genes)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_ntpm_high",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_ntpm_high = len(liver_ntpm_high_genes - liver_cluster_genes - liver_enrichment_genes)\nonly_cluster_left = len(liver_cluster_genes - liver_ntpm_high_genes - liver_enrichment_genes)\nonly_enrichment_left = len(liver_enrichment_genes - liver_ntpm_high_genes - liver_cluster_genes)\nntpm_high_cluster = len((liver_ntpm_high_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_high_enrichment = len((liver_ntpm_high_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_cluster_left",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_cluster_left = len(liver_cluster_genes - liver_ntpm_high_genes - liver_enrichment_genes)\nonly_enrichment_left = len(liver_enrichment_genes - liver_ntpm_high_genes - liver_cluster_genes)\nntpm_high_cluster = len((liver_ntpm_high_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_high_enrichment = len((liver_ntpm_high_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_enrichment_left",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_enrichment_left = len(liver_enrichment_genes - liver_ntpm_high_genes - liver_cluster_genes)\nntpm_high_cluster = len((liver_ntpm_high_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_high_enrichment = len((liver_ntpm_high_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')\nif venn1.get_label_by_id('010'):",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_high_cluster",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ntpm_high_cluster = len((liver_ntpm_high_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_high_enrichment = len((liver_ntpm_high_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')\nif venn1.get_label_by_id('010'):\n    venn1.get_label_by_id('010').set_text(f\"{only_cluster_left}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_high_enrichment",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ntpm_high_enrichment = len((liver_ntpm_high_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')\nif venn1.get_label_by_id('010'):\n    venn1.get_label_by_id('010').set_text(f\"{only_cluster_left}\")\n    venn1.get_label_by_id('010').set_fontsize(12)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "cluster_enrichment_left",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "cluster_enrichment_left = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_high_genes)\nall_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')\nif venn1.get_label_by_id('010'):\n    venn1.get_label_by_id('010').set_text(f\"{only_cluster_left}\")\n    venn1.get_label_by_id('010').set_fontsize(12)\n    venn1.get_label_by_id('010').set_fontweight('bold')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_three_high",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "all_three_high = len(liver_ntpm_high_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn1.get_label_by_id('100'):\n    venn1.get_label_by_id('100').set_text(f\"{only_ntpm_high}\")\n    venn1.get_label_by_id('100').set_fontsize(12)\n    venn1.get_label_by_id('100').set_fontweight('bold')\nif venn1.get_label_by_id('010'):\n    venn1.get_label_by_id('010').set_text(f\"{only_cluster_left}\")\n    venn1.get_label_by_id('010').set_fontsize(12)\n    venn1.get_label_by_id('010').set_fontweight('bold')\nif venn1.get_label_by_id('001'):",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ax2 = fig.add_subplot(122)\nvenn2 = venn3(\n    [liver_ntpm_low_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FFB6C1', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax2\n)\nax2.set_title('nTPM < 100 (liver mentioned)', fontsize=14, fontweight='bold', pad=15)\n# Customize subset labels for right diagram (nTPM < 100)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "venn2",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "venn2 = venn3(\n    [liver_ntpm_low_genes, liver_cluster_genes, liver_enrichment_genes],\n    set_labels=('', '', ''),\n    set_colors=('#FFB6C1', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax2\n)\nax2.set_title('nTPM < 100 (liver mentioned)', fontsize=14, fontweight='bold', pad=15)\n# Customize subset labels for right diagram (nTPM < 100)\nonly_ntpm_low = len(liver_ntpm_low_genes - liver_cluster_genes - liver_enrichment_genes)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_ntpm_low",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_ntpm_low = len(liver_ntpm_low_genes - liver_cluster_genes - liver_enrichment_genes)\nonly_cluster_right = len(liver_cluster_genes - liver_ntpm_low_genes - liver_enrichment_genes)\nonly_enrichment_right = len(liver_enrichment_genes - liver_ntpm_low_genes - liver_cluster_genes)\nntpm_low_cluster = len((liver_ntpm_low_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_low_enrichment = len((liver_ntpm_low_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_cluster_right",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_cluster_right = len(liver_cluster_genes - liver_ntpm_low_genes - liver_enrichment_genes)\nonly_enrichment_right = len(liver_enrichment_genes - liver_ntpm_low_genes - liver_cluster_genes)\nntpm_low_cluster = len((liver_ntpm_low_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_low_enrichment = len((liver_ntpm_low_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_enrichment_right",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "only_enrichment_right = len(liver_enrichment_genes - liver_ntpm_low_genes - liver_cluster_genes)\nntpm_low_cluster = len((liver_ntpm_low_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_low_enrichment = len((liver_ntpm_low_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')\nif venn2.get_label_by_id('010'):",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_low_cluster",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ntpm_low_cluster = len((liver_ntpm_low_genes & liver_cluster_genes) - liver_enrichment_genes)\nntpm_low_enrichment = len((liver_ntpm_low_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')\nif venn2.get_label_by_id('010'):\n    venn2.get_label_by_id('010').set_text(f\"{only_cluster_right}\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_low_enrichment",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "ntpm_low_enrichment = len((liver_ntpm_low_genes & liver_enrichment_genes) - liver_cluster_genes)\ncluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')\nif venn2.get_label_by_id('010'):\n    venn2.get_label_by_id('010').set_text(f\"{only_cluster_right}\")\n    venn2.get_label_by_id('010').set_fontsize(12)",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "cluster_enrichment_right",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "cluster_enrichment_right = len((liver_cluster_genes & liver_enrichment_genes) - liver_ntpm_low_genes)\nall_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')\nif venn2.get_label_by_id('010'):\n    venn2.get_label_by_id('010').set_text(f\"{only_cluster_right}\")\n    venn2.get_label_by_id('010').set_fontsize(12)\n    venn2.get_label_by_id('010').set_fontweight('bold')",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_three_low",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "all_three_low = len(liver_ntpm_low_genes & liver_cluster_genes & liver_enrichment_genes)\nif venn2.get_label_by_id('100'):\n    venn2.get_label_by_id('100').set_text(f\"{only_ntpm_low}\")\n    venn2.get_label_by_id('100').set_fontsize(12)\n    venn2.get_label_by_id('100').set_fontweight('bold')\nif venn2.get_label_by_id('010'):\n    venn2.get_label_by_id('010').set_text(f\"{only_cluster_right}\")\n    venn2.get_label_by_id('010').set_fontsize(12)\n    venn2.get_label_by_id('010').set_fontweight('bold')\nif venn2.get_label_by_id('001'):",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "output_dir",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "output_dir = 'output'\nos.makedirs(output_dir, exist_ok=True)\nplt.savefig(f'{output_dir}/liver_protein_venn_diagram.png', dpi=300, bbox_inches='tight')\nprint(f\"\\nVenn diagram saved to: {output_dir}/liver_protein_venn_diagram.png\")\n# Create Trace folder and save tracing data\ntrace_dir = 'Trace'\nos.makedirs(trace_dir, exist_ok=True)\n# Prepare tracing data with all relevant columns\ntrace_data = merged_data[[\n    'Gene',",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_dir",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "trace_dir = 'Trace'\nos.makedirs(trace_dir, exist_ok=True)\n# Prepare tracing data with all relevant columns\ntrace_data = merged_data[[\n    'Gene',\n    'RNA tissue specific nTPM',\n    'liver_nTPM_value',\n    'Tissue expression cluster',\n    'RNA tissue cell type enrichment',\n    'has_liver_nTPM_high',",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "trace_data = merged_data[[\n    'Gene',\n    'RNA tissue specific nTPM',\n    'liver_nTPM_value',\n    'Tissue expression cluster',\n    'RNA tissue cell type enrichment',\n    'has_liver_nTPM_high',\n    'has_liver_nTPM_low',\n    'has_liver_cluster',\n    'has_liver_enrichment',",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_file",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "trace_file = f'{trace_dir}/Data tracing.csv'\ntrace_data.to_csv(trace_file, index=False)\nprint(f\"Tracing data saved to: {trace_file}\")\n# Save summary statistics to Trace folder\nsummary_file = f'{trace_dir}/classification_summary.csv'\nclassification_counts.to_csv(summary_file, header=['Count'])\nprint(f\"Summary statistics saved to: {summary_file}\")\n# Save classified gene lists with liver nTPM values to Trace folder\n# Get all unique classifications\nall_classifications = merged_data['Classification'].unique()",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "summary_file",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "summary_file = f'{trace_dir}/classification_summary.csv'\nclassification_counts.to_csv(summary_file, header=['Count'])\nprint(f\"Summary statistics saved to: {summary_file}\")\n# Save classified gene lists with liver nTPM values to Trace folder\n# Get all unique classifications\nall_classifications = merged_data['Classification'].unique()\nliver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_classifications",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "all_classifications = merged_data['Classification'].unique()\nliver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:\n        genes_file = f'{trace_dir}/{classification.replace(\" \", \"_\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"+\", \"and\")}_genes.csv'\n        subset[['Gene', 'liver_nTPM_value']].to_csv(genes_file, index=False)\n        print(f\"{classification} genes ({len(subset)}): saved to {genes_file}\")\nprint(\"\\nClassification complete!\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_classifications",
        "kind": 5,
        "importPath": "core_pipeline.liver_protein_classifier",
        "description": "core_pipeline.liver_protein_classifier",
        "peekOfCode": "liver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:\n        genes_file = f'{trace_dir}/{classification.replace(\" \", \"_\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"+\", \"and\")}_genes.csv'\n        subset[['Gene', 'liver_nTPM_value']].to_csv(genes_file, index=False)\n        print(f\"{classification} genes ({len(subset)}): saved to {genes_file}\")\nprint(\"\\nClassification complete!\")",
        "detail": "core_pipeline.liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "Colors",
        "kind": 6,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "class Colors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def print_header(message):\n    \"\"\"Print a formatted header message\"\"\"\n    print(f\"\\n{Colors.HEADER}{Colors.BOLD}{'='*70}{Colors.ENDC}\")\n    print(f\"{Colors.HEADER}{Colors.BOLD}{message:^70}{Colors.ENDC}\")\n    print(f\"{Colors.HEADER}{Colors.BOLD}{'='*70}{Colors.ENDC}\\n\")\ndef print_step(step_num, total_steps, message):\n    \"\"\"Print a formatted step message\"\"\"\n    print(f\"{Colors.OKCYAN}{Colors.BOLD}[Step {step_num}/{total_steps}]{Colors.ENDC} {message}\")\ndef print_success(message):\n    \"\"\"Print a success message\"\"\"",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "print_step",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def print_step(step_num, total_steps, message):\n    \"\"\"Print a formatted step message\"\"\"\n    print(f\"{Colors.OKCYAN}{Colors.BOLD}[Step {step_num}/{total_steps}]{Colors.ENDC} {message}\")\ndef print_success(message):\n    \"\"\"Print a success message\"\"\"\n    print(f\"{Colors.OKGREEN}✓ {message}{Colors.ENDC}\")\ndef print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message\"\"\"\n    print(f\"{Colors.OKGREEN}✓ {message}{Colors.ENDC}\")\ndef print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "print_warning",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:\n        script_name (str): Name of the Python script to run\n        description (str): Description of what the script does\n    Returns:",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:\n        script_name (str): Name of the Python script to run\n        description (str): Description of what the script does\n    Returns:\n        bool: True if script ran successfully, False otherwise\n    \"\"\"\n    print(f\"\\n{Colors.OKBLUE}Running: {script_name}{Colors.ENDC}\")",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "check_prerequisites",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def check_prerequisites():\n    \"\"\"Check if required files and directories exist\"\"\"\n    print_header(\"Checking Prerequisites\")\n    required_files = [\n        'Trace/Data tracing.csv',\n    ]\n    required_scripts = [\n        'core_pipeline/visualize_ntpm.py',\n        'core_pipeline/visualize_group_distribution.py',\n    ]",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "core_pipeline.run_visualizations",
        "description": "core_pipeline.run_visualizations",
        "peekOfCode": "def main():\n    \"\"\"Main execution function\"\"\"\n    print_header(\"Liver Protein Visualization Pipeline\")\n    print(f\"{Colors.BOLD}This pipeline will generate:{Colors.ENDC}\")\n    print(\"  1. liver_ntpm_distribution.png - Top genes and distribution analysis\")\n    print(\"  2. liver_ntpm_group_distribution.png - Comprehensive group statistics\")\n    print(\"  3. liver_genes_sorted_by_ntpm.csv - Sorted gene list\")\n    # Check prerequisites\n    if not check_prerequisites():\n        print_error(\"\\nPrerequisite check failed. Please ensure all required files exist.\")",
        "detail": "core_pipeline.run_visualizations",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "trace_data = pd.read_csv('Trace/Data tracing.csv')\n# Filter genes with liver nTPM values\nliver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\n# Group by classification\ngroups = liver_genes.groupby('Classification')['liver_nTPM_value'].apply(list).to_dict()\n# Color mapping for new 4-category system\ncolor_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "liver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\n# Group by classification\ngroups = liver_genes.groupby('Classification')['liver_nTPM_value'].apply(list).to_dict()\n# Color mapping for new 4-category system\ncolor_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "groups",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "groups = liver_genes.groupby('Classification')['liver_nTPM_value'].apply(list).to_dict()\n# Color mapping for new 4-category system\ncolor_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',\n    'liver protein (nTPM≥100 only)': '#FFB6B6',\n    # Low nTPM (<100) categories\n    'liver protein (nTPM<100 + cluster + enrichment)': '#4169E1',",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "color_map",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "color_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',\n    'liver protein (nTPM≥100 only)': '#FFB6B6',\n    # Low nTPM (<100) categories\n    'liver protein (nTPM<100 + cluster + enrichment)': '#4169E1',\n    'liver protein (nTPM<100 + cluster)': '#87CEEB',\n    'liver protein (nTPM<100 + enrichment)': '#ADD8E6',",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "classification_order",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "classification_order = [\n    'liver protein (nTPM≥100 + cluster + enrichment)',\n    'liver protein (nTPM≥100 + cluster)',\n    'liver protein (nTPM≥100 + enrichment)',\n    'liver protein (nTPM≥100 only)',\n    'liver protein (nTPM<100 + cluster + enrichment)',\n    'liver protein (nTPM<100 + cluster)',\n    'liver protein (nTPM<100 + enrichment)',\n    'liver protein (nTPM<100 only)'\n]",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "groups_with_values",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "groups_with_values = {k: v for k, v in groups.items() if k in classification_order}\n# Create figure with multiple subplots - improved layout\nfig = plt.figure(figsize=(22, 16), facecolor='white')\ngs = fig.add_gridspec(3, 2, hspace=0.40, wspace=0.35, top=0.94, bottom=0.06, left=0.08, right=0.96)\n# Add overall title\nfig.suptitle('Liver Protein nTPM Distribution Analysis by Classification Group',\n             fontsize=20, fontweight='bold', y=0.98)\n# 1. Box Plot (Top Left)\nax1 = fig.add_subplot(gs[0, 0])\ndata_for_box = [groups_with_values[cat] for cat in classification_order if cat in groups_with_values]",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "fig = plt.figure(figsize=(22, 16), facecolor='white')\ngs = fig.add_gridspec(3, 2, hspace=0.40, wspace=0.35, top=0.94, bottom=0.06, left=0.08, right=0.96)\n# Add overall title\nfig.suptitle('Liver Protein nTPM Distribution Analysis by Classification Group',\n             fontsize=20, fontweight='bold', y=0.98)\n# 1. Box Plot (Top Left)\nax1 = fig.add_subplot(gs[0, 0])\ndata_for_box = [groups_with_values[cat] for cat in classification_order if cat in groups_with_values]\n# Shorten labels for better display\nlabels_for_box = []",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "gs",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "gs = fig.add_gridspec(3, 2, hspace=0.40, wspace=0.35, top=0.94, bottom=0.06, left=0.08, right=0.96)\n# Add overall title\nfig.suptitle('Liver Protein nTPM Distribution Analysis by Classification Group',\n             fontsize=20, fontweight='bold', y=0.98)\n# 1. Box Plot (Top Left)\nax1 = fig.add_subplot(gs[0, 0])\ndata_for_box = [groups_with_values[cat] for cat in classification_order if cat in groups_with_values]\n# Shorten labels for better display\nlabels_for_box = []\nfor cat in classification_order:",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax1 = fig.add_subplot(gs[0, 0])\ndata_for_box = [groups_with_values[cat] for cat in classification_order if cat in groups_with_values]\n# Shorten labels for better display\nlabels_for_box = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "data_for_box",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "data_for_box = [groups_with_values[cat] for cat in classification_order if cat in groups_with_values]\n# Shorten labels for better display\nlabels_for_box = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        labels_for_box.append(label)",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "labels_for_box",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "labels_for_box = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        labels_for_box.append(label)\nbp = ax1.boxplot(data_for_box, labels=labels_for_box, patch_artist=True,\n                 showmeans=True, meanline=True,",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "bp",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "bp = ax1.boxplot(data_for_box, labels=labels_for_box, patch_artist=True,\n                 showmeans=True, meanline=True,\n                 boxprops=dict(linewidth=2),\n                 medianprops=dict(linewidth=2.5, color='red'),\n                 meanprops=dict(linewidth=2.5, color='blue', linestyle='--'),\n                 whiskerprops=dict(linewidth=1.5),\n                 capprops=dict(linewidth=1.5),\n                 flierprops=dict(marker='o', markersize=4, alpha=0.5))\n# Color the boxes\nfor patch, cat in zip(bp['boxes'], [c for c in classification_order if c in groups_with_values]):",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "legend_elements",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "legend_elements = [\n    Line2D([0], [0], color='red', linewidth=2.5, label='Median'),\n    Line2D([0], [0], color='blue', linewidth=2.5, linestyle='--', label='Mean')\n]\nax1.legend(handles=legend_elements, loc='upper right', fontsize=9)\n# 2. Violin Plot (Top Right)\nax2 = fig.add_subplot(gs[0, 1])\n# Prepare data for violin plot\nviolin_data = []\nviolin_labels = []",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax2 = fig.add_subplot(gs[0, 1])\n# Prepare data for violin plot\nviolin_data = []\nviolin_labels = []\nviolin_colors = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        violin_data.append(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "violin_data",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "violin_data = []\nviolin_labels = []\nviolin_colors = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        violin_data.append(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "violin_labels",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "violin_labels = []\nviolin_colors = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        violin_data.append(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        violin_labels.append(label)",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "violin_colors",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "violin_colors = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        violin_data.append(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        violin_labels.append(label)\n        violin_colors.append(color_map[cat])",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "parts",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "parts = ax2.violinplot(violin_data, positions=range(len(violin_data)),\n                       showmeans=True, showmedians=True, widths=0.7)\n# Color the violins\nfor pc, color in zip(parts['bodies'], violin_colors):\n    pc.set_facecolor(color)\n    pc.set_alpha(0.7)\n    pc.set_edgecolor('black')\n    pc.set_linewidth(1.5)\n# Style the components\nparts['cmeans'].set_color('blue')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax3",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax3 = fig.add_subplot(gs[1, 0])\npositions = []\nall_values = []\nall_colors = []\nfor i, cat in enumerate(classification_order):\n    if cat in groups_with_values:\n        values = groups_with_values[cat]\n        positions.extend([i] * len(values))\n        all_values.extend(values)\n        all_colors.extend([color_map[cat]] * len(values))",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "positions",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "positions = []\nall_values = []\nall_colors = []\nfor i, cat in enumerate(classification_order):\n    if cat in groups_with_values:\n        values = groups_with_values[cat]\n        positions.extend([i] * len(values))\n        all_values.extend(values)\n        all_colors.extend([color_map[cat]] * len(values))\n# Add jitter to x positions",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "all_values",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "all_values = []\nall_colors = []\nfor i, cat in enumerate(classification_order):\n    if cat in groups_with_values:\n        values = groups_with_values[cat]\n        positions.extend([i] * len(values))\n        all_values.extend(values)\n        all_colors.extend([color_map[cat]] * len(values))\n# Add jitter to x positions\nnp.random.seed(42)",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "all_colors",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "all_colors = []\nfor i, cat in enumerate(classification_order):\n    if cat in groups_with_values:\n        values = groups_with_values[cat]\n        positions.extend([i] * len(values))\n        all_values.extend(values)\n        all_colors.extend([color_map[cat]] * len(values))\n# Add jitter to x positions\nnp.random.seed(42)\njittered_positions = np.array(positions) + np.random.normal(0, 0.1, len(positions))",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "jittered_positions",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "jittered_positions = np.array(positions) + np.random.normal(0, 0.1, len(positions))\nax3.scatter(jittered_positions, all_values, c=all_colors, alpha=0.5, s=30, edgecolors='black', linewidth=0.5)\n# Overlay box plot\nbp3 = ax3.boxplot(data_for_box, positions=range(len(data_for_box)),\n                  widths=0.3, patch_artist=False,\n                  boxprops=dict(linewidth=2, color='black'),\n                  medianprops=dict(linewidth=2.5, color='red'),\n                  whiskerprops=dict(linewidth=1.5, color='black'),\n                  capprops=dict(linewidth=1.5, color='black'),\n                  showfliers=False)",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "bp3",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "bp3 = ax3.boxplot(data_for_box, positions=range(len(data_for_box)),\n                  widths=0.3, patch_artist=False,\n                  boxprops=dict(linewidth=2, color='black'),\n                  medianprops=dict(linewidth=2.5, color='red'),\n                  whiskerprops=dict(linewidth=1.5, color='black'),\n                  capprops=dict(linewidth=1.5, color='black'),\n                  showfliers=False)\nax3.set_xticks(range(len(labels_for_box)))\nax3.set_xticklabels(labels_for_box, rotation=20, ha='right', fontsize=11)\nax3.set_yscale('log')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax4",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax4 = fig.add_subplot(gs[1, 1])\nfor cat in classification_order:\n    if cat in groups_with_values:\n        values = np.array(groups_with_values[cat])\n        log_values = np.log10(values)\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        ax4.hist(log_values, bins=20, alpha=0.5, label=label,",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax5",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax5 = fig.add_subplot(gs[2, 0])\nfor cat in classification_order:\n    if cat in groups_with_values:\n        values = sorted(groups_with_values[cat])\n        cumulative = np.arange(1, len(values) + 1) / len(values) * 100\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        ax5.plot(values, cumulative, linewidth=2.5, label=label,",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "ax6",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "ax6 = fig.add_subplot(gs[2, 1])\nax6.axis('off')\n# Calculate statistics\nstats_data = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        values = np.array(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "stats_data",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "stats_data = []\nfor cat in classification_order:\n    if cat in groups_with_values:\n        values = np.array(groups_with_values[cat])\n        label = cat.replace('liver protein ', '').replace('(', '').replace(')', '')\n        label = label.replace('nTPM≥100', '≥100').replace('nTPM<100', '<100')\n        label = label.replace('cluster', 'C').replace('enrichment', 'E')\n        label = label.replace(' + ', '+')\n        stats_data.append([\n            label,",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "column_labels",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "column_labels = ['Group', 'N', 'Mean', 'Median', 'Std Dev', 'Min', 'Max', 'Q1', 'Q3']\ntable = ax6.table(cellText=stats_data, colLabels=column_labels,\n                  cellLoc='center', loc='center',\n                  colWidths=[0.19, 0.09, 0.11, 0.11, 0.11, 0.10, 0.10, 0.09, 0.09])\ntable.auto_set_font_size(False)\ntable.set_fontsize(10)\ntable.scale(1, 2.2)\n# Style header\nfor i in range(len(column_labels)):\n    cell = table[(0, i)]",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "core_pipeline.visualize_group_distribution",
        "description": "core_pipeline.visualize_group_distribution",
        "peekOfCode": "table = ax6.table(cellText=stats_data, colLabels=column_labels,\n                  cellLoc='center', loc='center',\n                  colWidths=[0.19, 0.09, 0.11, 0.11, 0.11, 0.10, 0.10, 0.09, 0.09])\ntable.auto_set_font_size(False)\ntable.set_fontsize(10)\ntable.scale(1, 2.2)\n# Style header\nfor i in range(len(column_labels)):\n    cell = table[(0, i)]\n    cell.set_facecolor('#4A90E2')",
        "detail": "core_pipeline.visualize_group_distribution",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "trace_data = pd.read_csv('Trace/Data tracing.csv')\n# Filter genes with liver nTPM values and sort by value\nliver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nliver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nliver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))\n# Top 50 genes",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_protein_2_count",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))\n# Top 50 genes\ntop_n = 50\ntop_genes = liver_genes.head(top_n)",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "top_n",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "top_n = 50\ntop_genes = liver_genes.head(top_n)\n# Color by classification - improved contrast with new 4-category system\ncolor_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',  # Bright red - highest priority\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',  # Light red\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',  # Orange-red\n    'liver protein (nTPM≥100 only)': '#FFB6B6',  # Very light red\n    # Low nTPM (<100) categories",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "top_genes",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "top_genes = liver_genes.head(top_n)\n# Color by classification - improved contrast with new 4-category system\ncolor_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',  # Bright red - highest priority\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',  # Light red\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',  # Orange-red\n    'liver protein (nTPM≥100 only)': '#FFB6B6',  # Very light red\n    # Low nTPM (<100) categories\n    'liver protein (nTPM<100 + cluster + enrichment)': '#4169E1',  # Royal blue",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "color_map",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "color_map = {\n    # High nTPM (>=100) categories\n    'liver protein (nTPM≥100 + cluster + enrichment)': '#FF0000',  # Bright red - highest priority\n    'liver protein (nTPM≥100 + cluster)': '#FF6B6B',  # Light red\n    'liver protein (nTPM≥100 + enrichment)': '#FF8C42',  # Orange-red\n    'liver protein (nTPM≥100 only)': '#FFB6B6',  # Very light red\n    # Low nTPM (<100) categories\n    'liver protein (nTPM<100 + cluster + enrichment)': '#4169E1',  # Royal blue\n    'liver protein (nTPM<100 + cluster)': '#87CEEB',  # Sky blue\n    'liver protein (nTPM<100 + enrichment)': '#ADD8E6',  # Light blue",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "colors = []\nfor classification in top_genes['Classification']:\n    colors.append(color_map.get(classification, '#CCCCCC'))\n# Plot top 50\nax1 = axes[0]\nbars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ax1 = axes[0]\nbars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)\nax1.invert_yaxis()\nax1.grid(axis='x', alpha=0.3, linestyle='--')\n# Add value labels on bars\nfor i, (idx, row) in enumerate(top_genes.iterrows()):",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "bars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)\nax1.invert_yaxis()\nax1.grid(axis='x', alpha=0.3, linestyle='--')\n# Add value labels on bars\nfor i, (idx, row) in enumerate(top_genes.iterrows()):\n    value = row['liver_nTPM_value']",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "unique_classifications",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "unique_classifications = top_genes['Classification'].unique()\nlegend_elements = []\n# High nTPM categories\nif 'liver protein (nTPM≥100 + cluster + enrichment)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF0000', edgecolor='black', label='nTPM≥100 + C + E', linewidth=1.5))\nif 'liver protein (nTPM≥100 + cluster)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF6B6B', edgecolor='black', label='nTPM≥100 + C', linewidth=1.5))\nif 'liver protein (nTPM≥100 + enrichment)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF8C42', edgecolor='black', label='nTPM≥100 + E', linewidth=1.5))\nif 'liver protein (nTPM≥100 only)' in unique_classifications:",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "legend_elements",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "legend_elements = []\n# High nTPM categories\nif 'liver protein (nTPM≥100 + cluster + enrichment)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF0000', edgecolor='black', label='nTPM≥100 + C + E', linewidth=1.5))\nif 'liver protein (nTPM≥100 + cluster)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF6B6B', edgecolor='black', label='nTPM≥100 + C', linewidth=1.5))\nif 'liver protein (nTPM≥100 + enrichment)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FF8C42', edgecolor='black', label='nTPM≥100 + E', linewidth=1.5))\nif 'liver protein (nTPM≥100 only)' in unique_classifications:\n    legend_elements.append(Patch(facecolor='#FFB6B6', edgecolor='black', label='nTPM≥100 only', linewidth=1.5))",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ax2 = axes[1]\nliver_genes_sorted = liver_genes.sort_values('liver_nTPM_value', ascending=True)\nx_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_sorted",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_genes_sorted = liver_genes.sort_values('liver_nTPM_value', ascending=True)\nx_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "x_positions",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "x_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "values = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')\nax2.set_title('Distribution of Liver nTPM Values Across All Genes', fontsize=14, fontweight='bold', pad=15)",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "scatter_colors",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "scatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')\nax2.set_title('Distribution of Liver nTPM Values Across All Genes', fontsize=14, fontweight='bold', pad=15)\nax2.grid(True, alpha=0.3, linestyle='--')\n# Create legend with updated classifications",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "unique_scatter_classifications",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "unique_scatter_classifications = liver_genes_sorted['Classification'].unique()\nlegend_elements_scatter = []\n# High nTPM categories\nif 'liver protein (nTPM≥100 + cluster + enrichment)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF0000', edgecolor='black', label='nTPM≥100 + C + E', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 + cluster)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF6B6B', edgecolor='black', label='nTPM≥100 + C', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 + enrichment)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF8C42', edgecolor='black', label='nTPM≥100 + E', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 only)' in unique_scatter_classifications:",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "legend_elements_scatter",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "legend_elements_scatter = []\n# High nTPM categories\nif 'liver protein (nTPM≥100 + cluster + enrichment)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF0000', edgecolor='black', label='nTPM≥100 + C + E', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 + cluster)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF6B6B', edgecolor='black', label='nTPM≥100 + C', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 + enrichment)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FF8C42', edgecolor='black', label='nTPM≥100 + E', alpha=0.7, linewidth=1.5))\nif 'liver protein (nTPM≥100 only)' in unique_scatter_classifications:\n    legend_elements_scatter.append(Patch(facecolor='#FFB6B6', edgecolor='black', label='nTPM≥100 only', alpha=0.7, linewidth=1.5))",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_high_ce",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_high_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + cluster + enrichment)\"])\nntpm_high_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + cluster)\"])\nntpm_high_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + enrichment)\"])\nntpm_high_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 only)\"])\nntpm_low_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster + enrichment)\"])\nntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_high_c",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_high_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + cluster)\"])\nntpm_high_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + enrichment)\"])\nntpm_high_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 only)\"])\nntpm_low_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster + enrichment)\"])\nntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_high_e",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_high_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 + enrichment)\"])\nntpm_high_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 only)\"])\nntpm_low_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster + enrichment)\"])\nntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_high_only",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_high_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM≥100 only)\"])\nntpm_low_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster + enrichment)\"])\nntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_low_ce",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_low_ce = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster + enrichment)\"])\nntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_low_c",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_low_c = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + cluster)\"])\nntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_low_e",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_low_e = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 + enrichment)\"])\nntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_low_only",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "ntpm_low_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM<100 only)\"])\n# Count those without nTPM values\ncluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'\nstats_text += f'  +E: {ntpm_high_e}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "cluster_only",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "cluster_only = len(trace_data[trace_data['Classification'] == 'liver protein (cluster only)'])\nenrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'\nstats_text += f'  +E: {ntpm_high_e}\\n'\nstats_text += f'  only: {ntpm_high_only}\\n'\nstats_text += f'nTPM<100:\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "enrichment_only",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "enrichment_only = len(trace_data[trace_data['Classification'] == 'liver protein (enrichment only)'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'\nstats_text += f'  +E: {ntpm_high_e}\\n'\nstats_text += f'  only: {ntpm_high_only}\\n'\nstats_text += f'nTPM<100:\\n'\nstats_text += f'  +C+E: {ntpm_low_ce}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "cluster_enrichment",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "cluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'\nstats_text += f'  +E: {ntpm_high_e}\\n'\nstats_text += f'  only: {ntpm_high_only}\\n'\nstats_text += f'nTPM<100:\\n'\nstats_text += f'  +C+E: {ntpm_low_ce}\\n'\nstats_text += f'  +C: {ntpm_low_c}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "stats_text",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "stats_text = f'nTPM values: {len(liver_genes)}\\n'\nstats_text += f'nTPM≥100:\\n'\nstats_text += f'  +C+E: {ntpm_high_ce}\\n'\nstats_text += f'  +C: {ntpm_high_c}\\n'\nstats_text += f'  +E: {ntpm_high_e}\\n'\nstats_text += f'  only: {ntpm_high_only}\\n'\nstats_text += f'nTPM<100:\\n'\nstats_text += f'  +C+E: {ntpm_low_ce}\\n'\nstats_text += f'  +C: {ntpm_low_c}\\n'\nstats_text += f'  +E: {ntpm_low_e}\\n'",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_detailed",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_genes_detailed = liver_genes[['Gene', 'liver_nTPM_value', 'Classification',\n                                     'RNA tissue specific nTPM', 'Tissue expression cluster']].copy()\nliver_genes_detailed = liver_genes_detailed.sort_values('liver_nTPM_value', ascending=False)\nliver_genes_detailed.to_csv('Trace/liver_genes_sorted_by_ntpm.csv', index=False)\nprint(f\"Detailed sorted gene list saved to: Trace/liver_genes_sorted_by_ntpm.csv\")\nprint(\"\\nAll visualizations completed successfully!\")\nprint(f\"\\nGenerated files:\")\nprint(f\"1. output/liver_ntpm_distribution.png - Top 50 bar chart and distribution\")\nprint(f\"2. Trace/liver_genes_sorted_by_ntpm.csv - Complete sorted gene list\")",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_detailed",
        "kind": 5,
        "importPath": "core_pipeline.visualize_ntpm",
        "description": "core_pipeline.visualize_ntpm",
        "peekOfCode": "liver_genes_detailed = liver_genes_detailed.sort_values('liver_nTPM_value', ascending=False)\nliver_genes_detailed.to_csv('Trace/liver_genes_sorted_by_ntpm.csv', index=False)\nprint(f\"Detailed sorted gene list saved to: Trace/liver_genes_sorted_by_ntpm.csv\")\nprint(\"\\nAll visualizations completed successfully!\")\nprint(f\"\\nGenerated files:\")\nprint(f\"1. output/liver_ntpm_distribution.png - Top 50 bar chart and distribution\")\nprint(f\"2. Trace/liver_genes_sorted_by_ntpm.csv - Complete sorted gene list\")",
        "detail": "core_pipeline.visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "Colors",
        "kind": 6,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "class Colors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_header(message):\n    \"\"\"Print a formatted header message\"\"\"\n    print(f\"\\n{Colors.HEADER}{Colors.BOLD}{'='*80}{Colors.ENDC}\")\n    print(f\"{Colors.HEADER}{Colors.BOLD}{message:^80}{Colors.ENDC}\")\n    print(f\"{Colors.HEADER}{Colors.BOLD}{'='*80}{Colors.ENDC}\\n\")\ndef print_step(step_num, total_steps, message):\n    \"\"\"Print a formatted step message\"\"\"\n    print(f\"\\n{Colors.OKCYAN}{Colors.BOLD}[Step {step_num}/{total_steps}]{Colors.ENDC} {message}\")\ndef print_success(message):\n    \"\"\"Print a success message\"\"\"",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_step",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_step(step_num, total_steps, message):\n    \"\"\"Print a formatted step message\"\"\"\n    print(f\"\\n{Colors.OKCYAN}{Colors.BOLD}[Step {step_num}/{total_steps}]{Colors.ENDC} {message}\")\ndef print_success(message):\n    \"\"\"Print a success message\"\"\"\n    print(f\"{Colors.OKGREEN}✓ {message}{Colors.ENDC}\")\ndef print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_success",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_success(message):\n    \"\"\"Print a success message\"\"\"\n    print(f\"{Colors.OKGREEN}✓ {message}{Colors.ENDC}\")\ndef print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef print_info(message):",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_error",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_error(message):\n    \"\"\"Print an error message\"\"\"\n    print(f\"{Colors.FAIL}✗ {message}{Colors.ENDC}\")\ndef print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef print_info(message):\n    \"\"\"Print an info message\"\"\"\n    print(f\"{Colors.OKBLUE}ℹ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_warning",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_warning(message):\n    \"\"\"Print a warning message\"\"\"\n    print(f\"{Colors.WARNING}⚠ {message}{Colors.ENDC}\")\ndef print_info(message):\n    \"\"\"Print an info message\"\"\"\n    print(f\"{Colors.OKBLUE}ℹ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def print_info(message):\n    \"\"\"Print an info message\"\"\"\n    print(f\"{Colors.OKBLUE}ℹ {message}{Colors.ENDC}\")\ndef run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:\n        script_name (str): Name of the Python script to run\n        description (str): Description of what the script does\n    Returns:",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def run_script(script_name, description):\n    \"\"\"\n    Run a Python script and return success status\n    Args:\n        script_name (str): Name of the Python script to run\n        description (str): Description of what the script does\n    Returns:\n        bool: True if script ran successfully, False otherwise\n    \"\"\"\n    print(f\"\\n{Colors.OKBLUE}Running: {script_name}{Colors.ENDC}\")",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "check_input_files",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def check_input_files():\n    \"\"\"Check if required input files exist\"\"\"\n    print_header(\"Checking Input Files\")\n    required_files = [\n        'input/proteinatlas.tsv',\n        'input/*.csv',  # At least one CSV file\n    ]\n    print(f\"{Colors.BOLD}Required input files:{Colors.ENDC}\")\n    # Check TSV file\n    tsv_path = Path('input/proteinatlas.tsv')",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "check_trace_data",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def check_trace_data():\n    \"\"\"Check if trace data exists (for visualization-only mode)\"\"\"\n    trace_file = Path('Trace/Data tracing.csv')\n    return trace_file.exists()\ndef run_full_pipeline(include_advanced=True):\n    \"\"\"\n    Run the full analysis pipeline\n    Args:\n        include_advanced (bool): Whether to include advanced analysis steps\n    \"\"\"",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "run_full_pipeline",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def run_full_pipeline(include_advanced=True):\n    \"\"\"\n    Run the full analysis pipeline\n    Args:\n        include_advanced (bool): Whether to include advanced analysis steps\n    \"\"\"\n    pipeline_steps = [\n        {\n            'name': 'Classification',\n            'script': 'core_pipeline/liver_protein_classifier.py',",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "run_visualization_only",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def run_visualization_only():\n    \"\"\"Run only visualization scripts (requires existing trace data)\"\"\"\n    print_header(\"Running Visualization Only\")\n    if not check_trace_data():\n        print_error(\"Trace data not found: Trace/Data tracing.csv\")\n        print_info(\"Please run the full pipeline or classification step first\")\n        return False\n    print_success(\"Found trace data\")\n    return run_script('core_pipeline/run_visualizations.py', 'Generate all visualization plots')\ndef main():",
        "detail": "run_pipeline",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run_pipeline",
        "description": "run_pipeline",
        "peekOfCode": "def main():\n    \"\"\"Main execution function\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Liver Protein Analysis Pipeline',\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n  python run_pipeline.py              # Run full pipeline with advanced analysis\n  python run_pipeline.py --quick      # Run only classification and basic visualization\n  python run_pipeline.py --viz-only   # Run only visualization (requires existing data)",
        "detail": "run_pipeline",
        "documentation": {}
    }
]