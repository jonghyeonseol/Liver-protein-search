[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "venn3",
        "importPath": "matplotlib_venn",
        "description": "matplotlib_venn",
        "isExtraImport": true,
        "detail": "matplotlib_venn",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "extract_liver_ntpm",
        "kind": 2,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "def extract_liver_ntpm(text):\n    if pd.isna(text) or text == '':\n        return None\n    # Search for pattern \"liver: number\" or \"liver:number\"\n    pattern = r'liver:\\s*(\\d+\\.?\\d*)'\n    match = re.search(pattern, str(text).lower())\n    if match:\n        return float(match.group(1))\n    return None\n# Classification based on the criteria",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "classify_liver_protein",
        "kind": 2,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "def classify_liver_protein(row):\n    has_ntpm = row['has_liver_nTPM']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met\n    count = sum([has_ntpm, has_cluster, has_enrichment])\n    if count == 0:\n        return 'non-liver protein'\n    elif count == 3:\n        return 'liver protein (all 3)'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "gene_data",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "gene_data = pd.read_csv('input/log2_center_normalization_t_test_Human.csv')\nprotein_atlas = pd.read_csv('input/proteinatlas.tsv', sep='\\t')\n# Extract Gene column from gene_data (it's in the \"Gene\" column)\nprint(f\"Total genes in input file: {len(gene_data)}\")\nprint(f\"Total genes in protein atlas: {len(protein_atlas)}\")\n# Merge the two dataframes on Gene column\nmerged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',\n    how='left'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "protein_atlas",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "protein_atlas = pd.read_csv('input/proteinatlas.tsv', sep='\\t')\n# Extract Gene column from gene_data (it's in the \"Gene\" column)\nprint(f\"Total genes in input file: {len(gene_data)}\")\nprint(f\"Total genes in protein atlas: {len(protein_atlas)}\")\n# Merge the two dataframes on Gene column\nmerged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',\n    how='left'\n)",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data = gene_data.merge(\n    protein_atlas[['Gene', 'RNA tissue specific nTPM', 'Tissue expression cluster', 'RNA tissue cell type enrichment']],\n    on='Gene',\n    how='left'\n)\nprint(f\"Total merged records: {len(merged_data)}\")\n# Function to extract liver nTPM value\ndef extract_liver_ntpm(text):\n    if pd.isna(text) or text == '':\n        return None",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['liver_nTPM_value']",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data['liver_nTPM_value'] = merged_data['RNA tissue specific nTPM'].apply(extract_liver_ntpm)\nmerged_data['has_liver_nTPM'] = merged_data['RNA tissue specific nTPM'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm = row['has_liver_nTPM']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_nTPM']",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_nTPM'] = merged_data['RNA tissue specific nTPM'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm = row['has_liver_nTPM']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met\n    count = sum([has_ntpm, has_cluster, has_enrichment])",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_cluster']",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_cluster'] = merged_data['Tissue expression cluster'].fillna('').str.lower().str.contains('liver')\nmerged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm = row['has_liver_nTPM']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met\n    count = sum([has_ntpm, has_cluster, has_enrichment])\n    if count == 0:",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['has_liver_enrichment']",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data['has_liver_enrichment'] = merged_data['RNA tissue cell type enrichment'].fillna('').str.lower().str.contains('liver')\n# Create classification column with more detailed logic\ndef classify_liver_protein(row):\n    has_ntpm = row['has_liver_nTPM']\n    has_cluster = row['has_liver_cluster']\n    has_enrichment = row['has_liver_enrichment']\n    # Count how many conditions are met\n    count = sum([has_ntpm, has_cluster, has_enrichment])\n    if count == 0:\n        return 'non-liver protein'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "merged_data['Classification']",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "merged_data['Classification'] = merged_data.apply(classify_liver_protein, axis=1)\n# Count each category\nclassification_counts = merged_data['Classification'].value_counts()\nprint(\"\\nClassification Results:\")\nprint(classification_counts)\n# Print statistics about extracted liver nTPM values\nliver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "classification_counts",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "classification_counts = merged_data['Classification'].value_counts()\nprint(\"\\nClassification Results:\")\nprint(classification_counts)\n# Print statistics about extracted liver nTPM values\nliver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")\n    print(f\"Mean: {liver_ntpm_stats.mean():.2f}\")\n    print(f\"Median: {liver_ntpm_stats.median():.2f}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_ntpm_stats",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_ntpm_stats = merged_data[merged_data['liver_nTPM_value'].notna()]['liver_nTPM_value']\nif len(liver_ntpm_stats) > 0:\n    print(f\"\\nLiver nTPM Value Statistics:\")\n    print(f\"Total genes with liver nTPM values: {len(liver_ntpm_stats)}\")\n    print(f\"Mean: {liver_ntpm_stats.mean():.2f}\")\n    print(f\"Median: {liver_ntpm_stats.median():.2f}\")\n    print(f\"Min: {liver_ntpm_stats.min():.2f}\")\n    print(f\"Max: {liver_ntpm_stats.max():.2f}\")\n# Get gene lists for Venn diagram\nall_genes = set(merged_data['Gene'].tolist())",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "all_genes = set(merged_data['Gene'].tolist())\nliver_protein_1_genes = set(merged_data[merged_data['has_liver_nTPM']]['Gene'].tolist())\nliver_protein_2_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_protein_3_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_protein_1_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_protein_1_genes = set(merged_data[merged_data['has_liver_nTPM']]['Gene'].tolist())\nliver_protein_2_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_protein_3_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_protein_2_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_protein_2_genes = set(merged_data[merged_data['has_liver_cluster']]['Gene'].tolist())\nliver_protein_3_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_protein_3_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_protein_3_genes = set(merged_data[merged_data['has_liver_enrichment']]['Gene'].tolist())\ntotal_genes = len(all_genes)\nliver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver in RNA tissue specific nTPM: {len(liver_protein_1_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "total_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "total_genes = len(all_genes)\nliver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver in RNA tissue specific nTPM: {len(liver_protein_1_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_protein_2_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_candidates_set",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_candidates_set = liver_protein_1_genes | liver_protein_2_genes | liver_protein_3_genes\nliver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver in RNA tissue specific nTPM: {len(liver_protein_1_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_protein_2_genes)}\")\nprint(f\"Genes with liver in RNA tissue cell type enrichment: {len(liver_protein_3_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_candidates",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_candidates = len(liver_candidates_set)\nnon_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver in RNA tissue specific nTPM: {len(liver_protein_1_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_protein_2_genes)}\")\nprint(f\"Genes with liver in RNA tissue cell type enrichment: {len(liver_protein_3_genes)}\")\nprint(f\"Genes only in nTPM: {len(liver_protein_1_genes - liver_protein_2_genes - liver_protein_3_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "non_liver_genes",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "non_liver_genes = all_genes - liver_candidates_set\nprint(f\"\\nVenn Diagram Statistics:\")\nprint(f\"Total genes: {total_genes}\")\nprint(f\"Liver protein candidates (union): {liver_candidates}\")\nprint(f\"Non-liver proteins: {len(non_liver_genes)}\")\nprint(f\"Genes with liver in RNA tissue specific nTPM: {len(liver_protein_1_genes)}\")\nprint(f\"Genes with liver in Tissue expression cluster: {len(liver_protein_2_genes)}\")\nprint(f\"Genes with liver in RNA tissue cell type enrichment: {len(liver_protein_3_genes)}\")\nprint(f\"Genes only in nTPM: {len(liver_protein_1_genes - liver_protein_2_genes - liver_protein_3_genes)}\")\nprint(f\"Genes only in cluster: {len(liver_protein_2_genes - liver_protein_1_genes - liver_protein_3_genes)}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "fig = plt.figure(figsize=(14, 12))\nax = fig.add_subplot(111)\nvenn = venn3(\n    [liver_protein_1_genes, liver_protein_2_genes, liver_protein_3_genes],\n    set_labels=('', '', ''),  # We'll add custom labels\n    set_colors=('#FFB6C1', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax\n)\n# Add title with statistics",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "ax = fig.add_subplot(111)\nvenn = venn3(\n    [liver_protein_1_genes, liver_protein_2_genes, liver_protein_3_genes],\n    set_labels=('', '', ''),  # We'll add custom labels\n    set_colors=('#FFB6C1', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax\n)\n# Add title with statistics\ntitle_text = f'Liver Protein Classification (3 Criteria)'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "venn",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "venn = venn3(\n    [liver_protein_1_genes, liver_protein_2_genes, liver_protein_3_genes],\n    set_labels=('', '', ''),  # We'll add custom labels\n    set_colors=('#FFB6C1', '#87CEEB', '#98FB98'),\n    alpha=0.65,\n    ax=ax\n)\n# Add title with statistics\ntitle_text = f'Liver Protein Classification (3 Criteria)'\nsubtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "title_text",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "title_text = f'Liver Protein Classification (3 Criteria)'\nsubtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'\nplt.title(title_text, fontsize=18, fontweight='bold', pad=25, y=0.98)\nplt.text(0.5, 0.93, subtitle_text, ha='center', fontsize=13, transform=fig.transFigure)\n# Customize all subset labels\nonly_ntpm = len(liver_protein_1_genes - liver_protein_2_genes - liver_protein_3_genes)\nonly_cluster = len(liver_protein_2_genes - liver_protein_1_genes - liver_protein_3_genes)\nonly_enrichment = len(liver_protein_3_genes - liver_protein_1_genes - liver_protein_2_genes)\nntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "subtitle_text",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "subtitle_text = f'Total: {total_genes} proteins | Liver candidates: {liver_candidates} ({liver_candidates/total_genes*100:.1f}%) | Non-liver: {len(non_liver_genes)}'\nplt.title(title_text, fontsize=18, fontweight='bold', pad=25, y=0.98)\nplt.text(0.5, 0.93, subtitle_text, ha='center', fontsize=13, transform=fig.transFigure)\n# Customize all subset labels\nonly_ntpm = len(liver_protein_1_genes - liver_protein_2_genes - liver_protein_3_genes)\nonly_cluster = len(liver_protein_2_genes - liver_protein_1_genes - liver_protein_3_genes)\nonly_enrichment = len(liver_protein_3_genes - liver_protein_1_genes - liver_protein_2_genes)\nntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_ntpm",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "only_ntpm = len(liver_protein_1_genes - liver_protein_2_genes - liver_protein_3_genes)\nonly_cluster = len(liver_protein_2_genes - liver_protein_1_genes - liver_protein_3_genes)\nonly_enrichment = len(liver_protein_3_genes - liver_protein_1_genes - liver_protein_2_genes)\nntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_cluster",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "only_cluster = len(liver_protein_2_genes - liver_protein_1_genes - liver_protein_3_genes)\nonly_enrichment = len(liver_protein_3_genes - liver_protein_1_genes - liver_protein_2_genes)\nntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "only_enrichment",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "only_enrichment = len(liver_protein_3_genes - liver_protein_1_genes - liver_protein_2_genes)\nntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')\nif venn.get_label_by_id('010'):",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_cluster",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "ntpm_cluster = len((liver_protein_1_genes & liver_protein_2_genes) - liver_protein_3_genes)\nntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')\nif venn.get_label_by_id('010'):\n    venn.get_label_by_id('010').set_text(f\"{only_cluster}\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "ntpm_enrichment",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "ntpm_enrichment = len((liver_protein_1_genes & liver_protein_3_genes) - liver_protein_2_genes)\ncluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')\nif venn.get_label_by_id('010'):\n    venn.get_label_by_id('010').set_text(f\"{only_cluster}\")\n    venn.get_label_by_id('010').set_fontsize(13)",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "cluster_enrichment",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "cluster_enrichment = len((liver_protein_2_genes & liver_protein_3_genes) - liver_protein_1_genes)\nall_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')\nif venn.get_label_by_id('010'):\n    venn.get_label_by_id('010').set_text(f\"{only_cluster}\")\n    venn.get_label_by_id('010').set_fontsize(13)\n    venn.get_label_by_id('010').set_fontweight('bold')",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_three",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "all_three = len(liver_protein_1_genes & liver_protein_2_genes & liver_protein_3_genes)\nif venn.get_label_by_id('100'):\n    venn.get_label_by_id('100').set_text(f\"{only_ntpm}\")\n    venn.get_label_by_id('100').set_fontsize(13)\n    venn.get_label_by_id('100').set_fontweight('bold')\nif venn.get_label_by_id('010'):\n    venn.get_label_by_id('010').set_text(f\"{only_cluster}\")\n    venn.get_label_by_id('010').set_fontsize(13)\n    venn.get_label_by_id('010').set_fontweight('bold')\nif venn.get_label_by_id('001'):",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "legend_elements",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "legend_elements = [\n    Patch(facecolor='#FFB6C1', edgecolor='#8B0000', linewidth=2,\n          label=f'Only nTPM: {only_ntpm}', alpha=0.65),\n    Patch(facecolor='#87CEEB', edgecolor='#00008B', linewidth=2,\n          label=f'Only cluster: {only_cluster}', alpha=0.65),\n    Patch(facecolor='#98FB98', edgecolor='#006400', linewidth=2,\n          label=f'Only enrichment: {only_enrichment}', alpha=0.65),\n    Patch(facecolor='#DDA0DD', edgecolor='#4B0082', linewidth=2,\n          label=f'nTPM + cluster: {ntpm_cluster}', alpha=0.65),\n    Patch(facecolor='#F0E68C', edgecolor='#DAA520', linewidth=2,",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "output_dir",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "output_dir = 'output'\nos.makedirs(output_dir, exist_ok=True)\nplt.savefig(f'{output_dir}/liver_protein_venn_diagram.png', dpi=300, bbox_inches='tight')\nprint(f\"\\nVenn diagram saved to: {output_dir}/liver_protein_venn_diagram.png\")\n# Create Trace folder and save tracing data\ntrace_dir = 'Trace'\nos.makedirs(trace_dir, exist_ok=True)\n# Prepare tracing data with all relevant columns\ntrace_data = merged_data[[\n    'Gene',",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_dir",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "trace_dir = 'Trace'\nos.makedirs(trace_dir, exist_ok=True)\n# Prepare tracing data with all relevant columns\ntrace_data = merged_data[[\n    'Gene',\n    'RNA tissue specific nTPM',\n    'liver_nTPM_value',\n    'Tissue expression cluster',\n    'RNA tissue cell type enrichment',\n    'has_liver_nTPM',",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "trace_data = merged_data[[\n    'Gene',\n    'RNA tissue specific nTPM',\n    'liver_nTPM_value',\n    'Tissue expression cluster',\n    'RNA tissue cell type enrichment',\n    'has_liver_nTPM',\n    'has_liver_cluster',\n    'has_liver_enrichment',\n    'Classification'",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_file",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "trace_file = f'{trace_dir}/Data tracing.csv'\ntrace_data.to_csv(trace_file, index=False)\nprint(f\"Tracing data saved to: {trace_file}\")\n# Save summary statistics to Trace folder\nsummary_file = f'{trace_dir}/classification_summary.csv'\nclassification_counts.to_csv(summary_file, header=['Count'])\nprint(f\"Summary statistics saved to: {summary_file}\")\n# Save classified gene lists with liver nTPM values to Trace folder\n# Get all unique classifications\nall_classifications = merged_data['Classification'].unique()",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "summary_file",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "summary_file = f'{trace_dir}/classification_summary.csv'\nclassification_counts.to_csv(summary_file, header=['Count'])\nprint(f\"Summary statistics saved to: {summary_file}\")\n# Save classified gene lists with liver nTPM values to Trace folder\n# Get all unique classifications\nall_classifications = merged_data['Classification'].unique()\nliver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "all_classifications",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "all_classifications = merged_data['Classification'].unique()\nliver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:\n        genes_file = f'{trace_dir}/{classification.replace(\" \", \"_\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"+\", \"and\")}_genes.csv'\n        subset[['Gene', 'liver_nTPM_value']].to_csv(genes_file, index=False)\n        print(f\"{classification} genes ({len(subset)}): saved to {genes_file}\")\nprint(\"\\nClassification complete!\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "liver_classifications",
        "kind": 5,
        "importPath": "liver_protein_classifier",
        "description": "liver_protein_classifier",
        "peekOfCode": "liver_classifications = [c for c in all_classifications if c.startswith('liver protein')]\nfor classification in liver_classifications:\n    subset = merged_data[merged_data['Classification'] == classification]\n    if len(subset) > 0:\n        genes_file = f'{trace_dir}/{classification.replace(\" \", \"_\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"+\", \"and\")}_genes.csv'\n        subset[['Gene', 'liver_nTPM_value']].to_csv(genes_file, index=False)\n        print(f\"{classification} genes ({len(subset)}): saved to {genes_file}\")\nprint(\"\\nClassification complete!\")",
        "detail": "liver_protein_classifier",
        "documentation": {}
    },
    {
        "label": "trace_data",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "trace_data = pd.read_csv('Trace/Data tracing.csv')\n# Filter genes with liver nTPM values and sort by value\nliver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nliver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_genes = trace_data[trace_data['liver_nTPM_value'].notna()].copy()\nliver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_genes = liver_genes.sort_values('liver_nTPM_value', ascending=False)\n# Check liver protein_2 group (no nTPM values expected)\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))\n# Top 50 genes",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_protein_2_count",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nprint(f\"Total genes with liver nTPM values: {len(liver_genes)}\")\nprint(f\"Liver protein_2 genes (cluster only, no nTPM): {liver_protein_2_count}\")\nprint(f\"\\nTop 10 genes with highest liver nTPM:\")\nprint(liver_genes[['Gene', 'liver_nTPM_value', 'Classification']].head(10))\n# 1. Create horizontal bar plot for top genes\nfig, axes = plt.subplots(2, 1, figsize=(14, 16))\n# Top 50 genes\ntop_n = 50\ntop_genes = liver_genes.head(top_n)",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "top_n",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "top_n = 50\ntop_genes = liver_genes.head(top_n)\n# Color by classification\ncolor_map = {\n    'liver protein (all 3)': '#FFD700',  # Gold for all 3\n    'liver protein (nTPM + cluster)': '#DDA0DD',  # Plum for nTPM + cluster\n    'liver protein (nTPM + enrichment)': '#F0E68C',  # Khaki for nTPM + enrichment\n    'liver protein (cluster + enrichment)': '#87CEFA',  # Light sky blue for cluster + enrichment\n    'liver protein_1': '#FFB6C1',  # Light pink for nTPM only\n    'liver protein_2': '#87CEEB',  # Sky blue for cluster only",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "top_genes",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "top_genes = liver_genes.head(top_n)\n# Color by classification\ncolor_map = {\n    'liver protein (all 3)': '#FFD700',  # Gold for all 3\n    'liver protein (nTPM + cluster)': '#DDA0DD',  # Plum for nTPM + cluster\n    'liver protein (nTPM + enrichment)': '#F0E68C',  # Khaki for nTPM + enrichment\n    'liver protein (cluster + enrichment)': '#87CEFA',  # Light sky blue for cluster + enrichment\n    'liver protein_1': '#FFB6C1',  # Light pink for nTPM only\n    'liver protein_2': '#87CEEB',  # Sky blue for cluster only\n    'liver protein_3': '#98FB98',  # Pale green for enrichment only",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "color_map",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "color_map = {\n    'liver protein (all 3)': '#FFD700',  # Gold for all 3\n    'liver protein (nTPM + cluster)': '#DDA0DD',  # Plum for nTPM + cluster\n    'liver protein (nTPM + enrichment)': '#F0E68C',  # Khaki for nTPM + enrichment\n    'liver protein (cluster + enrichment)': '#87CEFA',  # Light sky blue for cluster + enrichment\n    'liver protein_1': '#FFB6C1',  # Light pink for nTPM only\n    'liver protein_2': '#87CEEB',  # Sky blue for cluster only\n    'liver protein_3': '#98FB98',  # Pale green for enrichment only\n    'non-liver protein': '#CCCCCC'  # Gray for non-liver\n}",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "colors = []\nfor classification in top_genes['Classification']:\n    colors.append(color_map.get(classification, '#CCCCCC'))\n# Plot top 50\nax1 = axes[0]\nbars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "ax1 = axes[0]\nbars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)\nax1.invert_yaxis()\nax1.grid(axis='x', alpha=0.3, linestyle='--')\n# Add value labels on bars\nfor i, (idx, row) in enumerate(top_genes.iterrows()):",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "bars = ax1.barh(range(len(top_genes)), top_genes['liver_nTPM_value'], color=colors, edgecolor='black', linewidth=0.5)\nax1.set_yticks(range(len(top_genes)))\nax1.set_yticklabels(top_genes['Gene'], fontsize=9)\nax1.set_xlabel('Liver nTPM Value', fontsize=12, fontweight='bold')\nax1.set_title(f'Top {top_n} Genes by Liver nTPM Value', fontsize=14, fontweight='bold', pad=15)\nax1.invert_yaxis()\nax1.grid(axis='x', alpha=0.3, linestyle='--')\n# Add value labels on bars\nfor i, (idx, row) in enumerate(top_genes.iterrows()):\n    value = row['liver_nTPM_value']",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "legend_elements",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "legend_elements = [\n    Patch(facecolor='#FFD700', edgecolor='black', label='All 3 criteria'),\n    Patch(facecolor='#DDA0DD', edgecolor='black', label='nTPM + cluster'),\n    Patch(facecolor='#F0E68C', edgecolor='black', label='nTPM + enrichment'),\n    Patch(facecolor='#87CEFA', edgecolor='black', label='cluster + enrichment'),\n    Patch(facecolor='#FFB6C1', edgecolor='black', label='nTPM only'),\n    Patch(facecolor='#87CEEB', edgecolor='black', label='cluster only'),\n    Patch(facecolor='#98FB98', edgecolor='black', label='enrichment only')\n]\nax1.legend(handles=legend_elements, loc='lower right', fontsize=9, ncol=2)",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "ax2 = axes[1]\nliver_genes_sorted = liver_genes.sort_values('liver_nTPM_value', ascending=True)\nx_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_sorted",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_genes_sorted = liver_genes.sort_values('liver_nTPM_value', ascending=True)\nx_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "x_positions",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "x_positions = range(len(liver_genes_sorted))\nvalues = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "values = liver_genes_sorted['liver_nTPM_value'].values\n# Color by classification\nscatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')\nax2.set_title('Distribution of Liver nTPM Values Across All Genes', fontsize=14, fontweight='bold', pad=15)",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "scatter_colors",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "scatter_colors = []\nfor classification in liver_genes_sorted['Classification']:\n    scatter_colors.append(color_map.get(classification, '#CCCCCC'))\nax2.scatter(x_positions, values, c=scatter_colors, alpha=0.6, s=30, edgecolors='black', linewidth=0.5)\nax2.set_xlabel('Gene Index (sorted by nTPM value)', fontsize=12, fontweight='bold')\nax2.set_ylabel('Liver nTPM Value (log scale)', fontsize=12, fontweight='bold')\nax2.set_yscale('log')\nax2.set_title('Distribution of Liver nTPM Values Across All Genes', fontsize=14, fontweight='bold', pad=15)\nax2.grid(True, alpha=0.3, linestyle='--')\n# Create legend with updated classifications",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "legend_elements_scatter",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "legend_elements_scatter = [\n    Patch(facecolor='#FFD700', edgecolor='black', label='All 3 criteria', alpha=0.6),\n    Patch(facecolor='#DDA0DD', edgecolor='black', label='nTPM + cluster', alpha=0.6),\n    Patch(facecolor='#F0E68C', edgecolor='black', label='nTPM + enrichment', alpha=0.6),\n    Patch(facecolor='#FFB6C1', edgecolor='black', label='nTPM only', alpha=0.6)\n]\nax2.legend(handles=legend_elements_scatter, loc='upper left', fontsize=10)\n# Add statistics text\n# Count each classification\nall_3 = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (all 3)\"])",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "all_3",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "all_3 = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (all 3)\"])\nntpm_cluster = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM + cluster)\"])\nntpm_enrichment = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM + enrichment)\"])\nntpm_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein_1\"])\n# Count those without nTPM values\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nliver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_cluster",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "ntpm_cluster = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM + cluster)\"])\nntpm_enrichment = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM + enrichment)\"])\nntpm_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein_1\"])\n# Count those without nTPM values\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nliver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_enrichment",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "ntpm_enrichment = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein (nTPM + enrichment)\"])\nntpm_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein_1\"])\n# Count those without nTPM values\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nliver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "ntpm_only",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "ntpm_only = len(liver_genes[liver_genes[\"Classification\"] == \"liver protein_1\"])\n# Count those without nTPM values\nliver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nliver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'\nstats_text += f'  nTPM only: {ntpm_only}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_protein_2_count",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_protein_2_count = len(trace_data[trace_data['Classification'] == 'liver protein_2'])\nliver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'\nstats_text += f'  nTPM only: {ntpm_only}\\n'\nstats_text += f'\\nGenes without nTPM:\\n'\nstats_text += f'  cluster only: {liver_protein_2_count}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_protein_3_count",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_protein_3_count = len(trace_data[trace_data['Classification'] == 'liver protein_3'])\ncluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'\nstats_text += f'  nTPM only: {ntpm_only}\\n'\nstats_text += f'\\nGenes without nTPM:\\n'\nstats_text += f'  cluster only: {liver_protein_2_count}\\n'\nstats_text += f'  enrichment only: {liver_protein_3_count}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "cluster_enrichment",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "cluster_enrichment = len(trace_data[trace_data['Classification'] == 'liver protein (cluster + enrichment)'])\nstats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'\nstats_text += f'  nTPM only: {ntpm_only}\\n'\nstats_text += f'\\nGenes without nTPM:\\n'\nstats_text += f'  cluster only: {liver_protein_2_count}\\n'\nstats_text += f'  enrichment only: {liver_protein_3_count}\\n'\nstats_text += f'  cluster + enrichment: {cluster_enrichment}\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "stats_text",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "stats_text = f'Genes with nTPM values: {len(liver_genes)}\\n'\nstats_text += f'  All 3 criteria: {all_3}\\n'\nstats_text += f'  nTPM + cluster: {ntpm_cluster}\\n'\nstats_text += f'  nTPM + enrichment: {ntpm_enrichment}\\n'\nstats_text += f'  nTPM only: {ntpm_only}\\n'\nstats_text += f'\\nGenes without nTPM:\\n'\nstats_text += f'  cluster only: {liver_protein_2_count}\\n'\nstats_text += f'  enrichment only: {liver_protein_3_count}\\n'\nstats_text += f'  cluster + enrichment: {cluster_enrichment}\\n'\nstats_text += f'\\nStats:\\n'",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_detailed",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_genes_detailed = liver_genes[['Gene', 'liver_nTPM_value', 'Classification',\n                                     'RNA tissue specific nTPM', 'Tissue expression cluster']].copy()\nliver_genes_detailed = liver_genes_detailed.sort_values('liver_nTPM_value', ascending=False)\nliver_genes_detailed.to_csv('Trace/liver_genes_sorted_by_ntpm.csv', index=False)\nprint(f\"Detailed sorted gene list saved to: Trace/liver_genes_sorted_by_ntpm.csv\")\nprint(\"\\nAll visualizations completed successfully!\")\nprint(f\"\\nGenerated files:\")\nprint(f\"1. output/liver_ntpm_distribution.png - Top 50 bar chart and distribution\")\nprint(f\"2. Trace/liver_genes_sorted_by_ntpm.csv - Complete sorted gene list\")",
        "detail": "visualize_ntpm",
        "documentation": {}
    },
    {
        "label": "liver_genes_detailed",
        "kind": 5,
        "importPath": "visualize_ntpm",
        "description": "visualize_ntpm",
        "peekOfCode": "liver_genes_detailed = liver_genes_detailed.sort_values('liver_nTPM_value', ascending=False)\nliver_genes_detailed.to_csv('Trace/liver_genes_sorted_by_ntpm.csv', index=False)\nprint(f\"Detailed sorted gene list saved to: Trace/liver_genes_sorted_by_ntpm.csv\")\nprint(\"\\nAll visualizations completed successfully!\")\nprint(f\"\\nGenerated files:\")\nprint(f\"1. output/liver_ntpm_distribution.png - Top 50 bar chart and distribution\")\nprint(f\"2. Trace/liver_genes_sorted_by_ntpm.csv - Complete sorted gene list\")",
        "detail": "visualize_ntpm",
        "documentation": {}
    }
]